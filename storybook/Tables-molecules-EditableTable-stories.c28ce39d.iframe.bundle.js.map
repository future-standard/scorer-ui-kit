{"version":3,"file":"Tables-molecules-EditableTable-stories.c28ce39d.iframe.bundle.js","mappings":";;AA2BA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/EditableTable.stories.tsx"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\nimport { object } from \"@storybook/addon-knobs\";\n\n\nimport {TypeTable as EditableTable,\n  EditCell,\n  ModalProvider,\n} from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\nimport {sleep} from '../../helpers';\n\nimport {\n  IRowData,\n  IDeviceStatus,\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nexport default {\n  title: 'Tables/molecules',\n  component: EditableTable,\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'Job Number',\n    sortable: false,\n    cellStyle: 'firstColumn',\n  },\n  {\n    header: 'Camera Name',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment:'left',\n  },\n  {\n    header: 'When',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment:'center',\n  },\n  {\n    header: 'Status',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n  },\n  {\n    header: 'Temperature',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n  },\n];\n\ninterface IExampleData {\n  id: string,\n  jobName: string,\n  cameraName: string,\n  jobTime: string,\n  status: IDeviceStatus,\n  statusText: string,\n  temperature: string,\n}\nconst sampleData: IExampleData[] = [\n  {\n    id: 'device-1',\n    jobName: 'capture123',\n    cameraName: 'Camera1',\n    jobTime: 'Just Now',\n    status: 'good',\n    statusText: 'OK',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-2',\n    jobName: 'capture234',\n    cameraName: 'Camera2',\n    jobTime: 'Just Now',\n    status: 'good',\n    statusText: 'OK',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-3',\n    jobName: 'capture345',\n    cameraName: 'Camera3',\n    jobTime: '3 mins ago',\n    status: 'danger',\n    statusText: 'Warning',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-4',\n    jobName: 'capture456',\n    cameraName: 'Camera4',\n    jobTime: '12 mins ago',\n    status: 'danger',\n    statusText:'Warning',\n    temperature: '38.2ºC',\n  }\n];\n\nexport const _EditableTable = () => {\n  const [data, setData] = useState<IExampleData[]>(sampleData);\n  const [rows, setRows] = useState<ITypeTableData>([]);\n  const columnConfig = object('ColumConfig', columnConfigSample);\n\n  const updateCameraName = useCallback(async (name: string, rowKey: string) => {\n    const updatedData = [...data];\n    const updatedRow = updatedData.find(({id}) =>  id === rowKey);\n    if(updatedRow && name.length > 0) {\n\n      updatedRow.cameraName = name;\n      // Database wait example\n      await sleep(3000);\n      setData(updatedData);\n    }\n  },[data]);\n\n  const buildDataRows = useCallback((data : IExampleData[]) : ITypeTableData =>  {\n    const newRows : ITypeTableData = data.map(({id, jobName, cameraName, jobTime, status, statusText, temperature}) => {\n      const row : IRowData =  ({\n        id,\n        header: {\n          image: photo,\n          mediaUrl: photo,\n          mediaType: 'img',\n        },\n        columns:\n        [ {text: jobName },\n          {customComponent: <EditCell alignment={'left'} defaultValue={cameraName} rowKey={id} saveCallback={updateCameraName} toLink='/'/>},\n          { text: jobTime},\n          { text: statusText, status },\n          { text: temperature },\n        ]\n      })\n      return row;\n    })\n\n    return newRows;\n  },[updateCameraName])\n\n  /**\n   * If data is updated the table will be rebuild\n   */\n\n  useEffect(() => {\n    const dataRows : ITypeTableData = buildDataRows(data);\n    setRows(dataRows);\n    return () => {\n      setRows([])\n    }\n  }, [data, buildDataRows]);\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <EditableTable {\n          ...{\n            columnConfig: columnConfig,\n            rows,\n            hasThumbnail: true,\n          }\n        } />\n      </ModalProvider>\n    </Container>\n  )\n};"],"names":[],"sourceRoot":""}