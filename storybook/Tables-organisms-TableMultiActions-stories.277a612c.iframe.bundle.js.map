{"version":3,"file":"Tables-organisms-TableMultiActions-stories.277a612c.iframe.bundle.js","mappings":";;;;;;AA8CA;;AAIA;;ACpCA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Tables/organisms/MultiActionsExample.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/organisms/TableMultiActions.stories.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport photo from '../../assets/placeholder.jpg';\nimport {\n  TypeTable,\n  IconButtonData,\n  ActionButtons,\n  FilterBar,\n  IFilterDatePicker,\n  IFilterResult,\n  isFilterItem,\n  ActionsBar,\n  useModal,\n  ConfirmationModal\n} from 'scorer-ui-kit';\n\nimport {\n  IRowData,\n  ITypeTableData,\n} from 'scorer-ui-kit/dist/Tables';\n\nimport {\n  tableData,\n  ITableSampleData,\n  columnActionsSample,\n  resultTextTemplateEng,\n  resultTextTemplateJp,\n  clearEng,\n  clearJp,\n  tableDataJp,\n  deleteMessageEn,\n  deleteMessageJp,\n  deleteFilesTitleEn,\n  deleteFilesTitleJP\n} from '../../helpers/data_samples';\n\nimport { filterByCreationDatePicker, sortDataBy } from '../../helpers/sample_table_helpers';\nimport { emptyCallbackForStory } from '../../helpers';\nimport { action } from '@storybook/addon-actions';\n\nconst SelectRows = styled.pre`\n  color: var(--grey-11);\n  margin-top: 75px;\n  background: var(--grey-4);\n  padding: 10px;\n  white-space: normal;\n`;\n\nconst TableBarWrapper = styled.div`\n  margin: 38px 0 26px 0;\n`;\n\nconst rowMaker = (rowData: ITableSampleData[], generateConfigButtons: Function): ITypeTableData => {\n  const newRows: ITypeTableData = rowData.map(({\n    id,\n    created,\n    totalTime,\n    usage,\n    usageUnit,\n    cost\n  }) => {\n\n    const row: IRowData = ({\n      id,\n      header: {\n        image: photo,\n        mediaUrl: photo,\n        mediaType: 'img',\n      },\n      columns: [\n        { text: created.toDateString() },\n        { text: totalTime },\n        { text: `${usage}`, unit: usageUnit },\n        { customComponent: <ActionButtons buttonsConfig={generateConfigButtons(id)} /> },\n      ]\n    })\n    return row;\n  })\n\n  return newRows;\n};\n\nconst getFilteredData = (currentSelected: IFilterResult[], data: ITableSampleData[]): ITableSampleData[] => {\n  if (Array.isArray(currentSelected) && (currentSelected.length > 0)) {\n    const filteredData: ITableSampleData[] = currentSelected.reduce((accumulator, currentFilter) => {\n      if (currentFilter.selected === null) {\n        return accumulator;\n      };\n\n      if (currentFilter.id === 'datePickerForRuntime' && !isFilterItem(currentFilter.selected) && !Array.isArray(currentFilter.selected)) {\n        return filterByCreationDatePicker(accumulator, currentFilter.selected);\n      }\n\n      return accumulator;\n    }, data);\n\n    return filteredData;\n  }\n\n  return data;\n}\n\nconst checkedRowIDs = (rows: ITypeTableData) => {\n  const ids: number | string[] = [];\n\n  rows.forEach((row) => {\n    if (row._checked && row.id) {\n      ids.push(row.id.toString());\n    }\n  });\n\n  return ids;\n\n}\n\ninterface IMultiActionsExample {\n  language: string\n}\n\nconst MultiActionsExample: React.FC<IMultiActionsExample> = ({ language }) => {\n\n  const [data, setData] = useState<ITableSampleData[]>(tableDataJp);\n  const [visibleBar, setVisibleBar] = useState('filterBar');\n  const downloadAction = action('Downloading...');\n  const deleteAction = action('Deleting...');\n\n  const { createModal } = useModal();\n\n  const openConfirmationModal = useCallback((deleteCallback: () => void) => {\n    console.log('creating modal');\n\n    createModal({\n      isCloseEnable: false,\n      customComponent: (\n        <ConfirmationModal\n          title={language === 'english' ? deleteFilesTitleEn : deleteFilesTitleJP}\n          message={language === 'english' ? deleteMessageEn : deleteMessageJp}\n          leftButtonText={language === 'english' ? 'Back' : '戻る'}\n          rightButtonText={language === 'english' ? 'Permanently Delete' : '永久削除'}\n          rightButtonDesign='danger'\n          rightButtonCallback={deleteCallback}\n        />\n      )\n    })\n  }, [createModal, language])\n\n  const handleDelete = useCallback((deviceId: string) => {\n    const notDeletedData: ITableSampleData[] = data.filter(({ id }) => id !== deviceId);\n    setData(notDeletedData);\n    deleteAction(`Deleting ${deviceId}`)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]); // deps for with addon actions was looping\n\n  const handleDownloadLogs = useCallback((deviceId: string) => {\n    downloadAction(`Downloading ${deviceId}`);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // deps with addon actions was looping\n\n  const generateConfigButtons = useCallback((rowId: string): IconButtonData[] => {\n    return (\n      [\n        {\n          icon: 'Delete',\n          onClick: () => { openConfirmationModal(() => handleDelete(rowId)) },\n        },\n        {\n          icon: 'Download',\n          onClick: () => { handleDownloadLogs(rowId) },\n        }\n      ]\n    )\n  }, [handleDelete, handleDownloadLogs, openConfirmationModal])\n\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(tableDataJp, generateConfigButtons));\n\n  const datePickers: IFilterDatePicker[] = [\n    {\n      id: 'datePickerForRuntime',\n      dateMode: 'interval',\n      timeMode: 'off',\n      buttonText: language === 'english' ? 'Date Range' : '日付範囲',\n      buttonIcon: 'DateTime',\n      dateTimeTextUpper: language === 'english' ? 'From' : 'から',\n      dateTimeTextLower: language === 'english' ? 'To' : 'まで',\n      timeZoneTitle: language === 'english' ? 'Timezone' : '時間帯',\n      lang: language === 'english' ? 'en' : 'ja'\n    }\n  ]\n\n  const updateVisibleBar = useCallback((newRows: ITypeTableData) => {\n    const areRowsSelected = newRows.some((row) => row._checked === true);\n    setVisibleBar((prev) => {\n      if ((prev !== 'actionsBar') && areRowsSelected) {\n        return 'actionsBar';\n      }\n\n      if ((prev !== 'filterBar' && !areRowsSelected)) {\n        return 'filterBar';\n      }\n\n      return prev;\n    });\n  }, [])\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n    updateVisibleBar(newRows);\n    setRows(newRows);\n  }, [rows, updateVisibleBar]);\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    updateVisibleBar(newRows);\n    setRows(newRows);\n  }, [rows, updateVisibleBar]);\n\n  const handleActionsFinish = useCallback(() => {\n    setVisibleBar('filterBar');\n    toggleAllCallback(false);\n  }, [toggleAllCallback])\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  const handleFilters = useCallback((currentSelected: IFilterResult[]) => {\n    const localData = language === 'english' ? tableData : tableDataJp\n    const tempData: ITableSampleData[] = [...localData];\n\n    if ((currentSelected.length === 0)) {\n      setData(localData);\n    } else {\n      const filteredData = getFilteredData(currentSelected, tempData);\n      setData(filteredData);\n    }\n\n  }, [language])\n\n  const handleDeleteSelected = useCallback(() => {\n    const rowsSelected = checkedRowIDs(rows);\n    deleteAction(`Deleting ${rowsSelected}`);\n    const notDeletedData: ITableSampleData[] = data.filter(({ id }) => !rowsSelected.includes(id))\n    setData(notDeletedData);\n\n  }, [data, deleteAction, rows]);\n\n  const handleDownloadSelected = useCallback(() => {\n    downloadAction(`Downloading: ${checkedRowIDs(rows).toString()}`)\n  }, [downloadAction, rows])\n\n  useEffect(() => {\n    setRows(rowMaker(data, generateConfigButtons));\n  }, [data, generateConfigButtons])\n\n  return (\n    <>\n      <TableBarWrapper>\n        {visibleBar === 'filterBar'\n          && (\n            <FilterBar\n              searchersConfig={[]}\n              dropdownsConfig={[]}\n              datePickersConfig={datePickers}\n              onChangeCallback={handleFilters}\n              totalResults={rows.length}\n              filtersTitle={language === 'english' ? 'Filters' : 'フィルター'}\n              resultTextTemplate={language === 'english' ? resultTextTemplateEng : resultTextTemplateJp}\n              clearText={language === 'english' ? clearEng : clearJp}\n              resultsDateFormat='yyyy-MM-dd'\n            />)}\n        {visibleBar === 'actionsBar' && (\n          <ActionsBar\n            title={language === 'english' ? 'Actions' : 'アクション'}\n            finishTextButton={language === 'english' ? 'Finish' : '為しおわる'}\n            finishCallback={handleActionsFinish}\n            selectedTemplate={language === 'english' ? 'Selected [SELECTED] of [TOTAL] Results' : '[SELECTED] 〜 [TOTAL]件'}\n            totalAvailable={rows.length}\n            totalSelected={checkedRowIDs(rows).length}\n            actionButtons={[\n              {\n                icon: 'Delete',\n                text: language === 'english' ? 'Delete' : '消す',\n                onClick: () => { openConfirmationModal(handleDeleteSelected) }\n              },\n              {\n                icon: 'Download',\n                text: language === 'english' ? 'Download' : 'ダウンロード',\n                onClick: () => { handleDownloadSelected() }\n              }\n            ]}\n          />\n        )}\n      </TableBarWrapper>\n      <TypeTable {...{\n        columnConfig: columnActionsSample,\n        selectable: true,\n        rows,\n        hasThumbnail: true,\n        defaultAscending: true,\n        hasHeaderGroups: true\n      }}\n\n        selectCallback={emptyCallbackForStory(selectCallback)}\n        toggleAllCallback={emptyCallbackForStory(toggleAllCallback)}\n        sortCallback={emptyCallbackForStory(sortCallback)}\n      />\n      <SelectRows>Selected IDs: [{checkedRowIDs(rows).toString()}]</SelectRows>\n    </>\n  );\n};\n\nexport default MultiActionsExample;","\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport MultiActionsExample from \"./MultiActionsExample\";\nimport { select } from \"@storybook/addon-knobs\";\nimport {\n  ModalProvider,\n  TypeTable,\n} from 'scorer-ui-kit';\n\n\n\nconst Container = styled.div`\n  padding: 100px;\n`;\nconst TableMultiActionsStory = {\n  title: 'Tables/molecules',\n  component: TypeTable,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 2 }\n  }\n};\n\n// Story starts here o.o\nexport const _TableMultiActions = () => {\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <MultiActionsExample {...{language}}/>\n      </ModalProvider>\n    </Container>\n  );\n};\n\nexport default TableMultiActionsStory;"],"names":[],"sourceRoot":""}