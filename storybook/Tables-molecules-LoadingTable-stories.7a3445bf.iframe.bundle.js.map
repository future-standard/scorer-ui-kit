{"version":3,"file":"Tables-molecules-LoadingTable-stories.7a3445bf.iframe.bundle.js","mappings":";;AAoBA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/LoadingTable.stories.tsx"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {boolean, text, object} from \"@storybook/addon-knobs\";\n\nimport {TypeTable as LoadingTable } from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\n\nimport {\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nconst LoadingTableStory = {\n  title: 'Tables/molecules',\n  component: LoadingTable,\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'When',\n    groupTitle: 'Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    minWidth: 200,\n  },\n  {\n    header: 'Status',\n    groupTitle: 'Metadata',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n    minWidth: 200,\n  },\n  {\n    header: 'The Highest Temperature Recorded',\n    groupTitle: 'Metadata',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    minWidth: 200,\n  },\n];\n\nconst initialRows : ITypeTableData = [\n  {\n    columns: []\n  }\n];\n\n\nconst dataRows : ITypeTableData = [\n  {\n    id: 'device-1',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: 'JustNow'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-2',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '3 mins ago'},\n      { text: 'Warning', status: 'danger' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-3',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '12 mins ago'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-4',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '1 hour ago'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n];\n\nexport const _LoadingTable = () => {\n  const isLoading = boolean(\"IsLoading\", true);\n  const emptyTable = boolean(\"Show Empty Table\", true);\n  const disableOneCheckbox = boolean('Disable 1st Checkbox', false);\n  const emptyTableTitle = text(\"emptyTableTitle\",\"No Data Available\");\n  const emptyTableText = text(\"emptyTableText\", 'There is currently no data');\n  const loadingText = text(\"loadingText\", 'Loading Data..')\n  const selectable = boolean(\"Selectable Rows\", true);\n  const hasGroups = boolean('Has Header Groups', true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n\n\n  const [rows, setRows] = useState<ITypeTableData>(initialRows);\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    setRows((prevRows) => {\n      const newRows = [...prevRows];\n      newRows.forEach((row) => {\n        row._checked = checked;\n      });\n      return newRows;\n    });\n  }, [setRows]);\n\n    // Sent to checkbox in TableRow via Table component.\n    const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n      setRows((prevRows) => {\n        const newRows = [...prevRows];\n        const targetRowIndex = newRows.findIndex((row) => row.id === id);\n        if (targetRowIndex > -1) {\n          newRows[targetRowIndex]._checked = checked;\n        }\n        return newRows;\n      });\n    }, [setRows]);\n\n  useEffect(() => {\n    if(emptyTable) {\n      setRows(initialRows)\n    } else {\n      setRows(dataRows);\n    }\n    return () => {\n      setRows(initialRows);\n    }\n  }, [emptyTable])\n\n  useEffect(() => {\n    setRows((prevRows) => {\n      const newRows = [...prevRows];\n      newRows[0].checkboxDisabled = disableOneCheckbox;\n      return newRows;\n    });\n  }, [disableOneCheckbox])\n\n  return (\n    <Container>\n      <LoadingTable\n        hasHeaderGroups={hasGroups}\n        {...{\n          columnConfig,\n          rows,\n          toggleAllCallback,\n          selectable,\n          selectCallback,\n          isLoading,\n          loadingText,\n          hasThumbnail: true,\n          emptyTableTitle,\n          emptyTableText,\n        }}\n      />\n    </Container>\n  )\n\n\n};\n\nexport default LoadingTableStory;"],"names":[],"sourceRoot":""}