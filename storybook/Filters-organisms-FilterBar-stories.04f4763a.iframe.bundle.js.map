{"version":3,"file":"Filters-organisms-FilterBar-stories.04f4763a.iframe.bundle.js","mappings":";;AA0DA;;AAOA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Filters/organisms/FilterBar.stories.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { select, object, boolean, text } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\nimport {\n  FilterBar,\n  ISearchFilter,\n  TypeTable,\n  IFilterDropdownConfig,\n  IFilterResult,\n  IFilterDatePicker,\n  isFilterItem,\n} from 'scorer-ui-kit'\n\nimport {\n  tableData,\n  tableDataJp,\n  columnConfigSample,\n  ITableSampleData,\n  columnConfigSampleJp,\n  statusValuesEng,\n  statusValuesJp,\n  genericLoadingJp,\n  searchTemplateResultEnglish,\n  searchTemplateResultJapanese,\n  costRangeEng,\n  costRangeJap,\n  clearEng,\n  clearJp,\n  showLessEng,\n  showLessJp,\n  showMoreEng,\n  showMoreJp,\n  resultTextTemplateEng,\n  resultTextTemplateJp,\n} from '../../helpers/data_samples';\n\nimport {\n  sortDataBy,\n  rowMaker,\n  filterByStatus,\n  filterByPrice,\n  filterByName,\n  filterByCreationDate,\n  filterByCreationDatePicker\n} from '../../helpers/sample_table_helpers';\nimport { ITypeTableData } from 'scorer-ui-kit/dist/Tables';\nimport { dataContentDays, datesRange, InitialSelectedDate } from '../../helpers/datePicker_sample';\n\nconst FilterBarStory = {\n  title: 'Filters/Organism',\n  component: 'FilterBar',\n  decorators: []\n};\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nconst TypeTableWrapper = styled.div`\nmargin: 60px 0 20px 0\n`;\n\n// const today: Date = new Date();\nconst before: Date = new Date();\nbefore.setDate(before.getDate() - 5);\n\nconst dataInitialState = sortDataBy(tableData, 'deviceName', true);\n\nconst getFilteredData = (currentSelected: IFilterResult[], data: ITableSampleData[]): ITableSampleData[] => {\n\n\n  if (Array.isArray(currentSelected) && (currentSelected.length > 0)) {\n    const filteredData: ITableSampleData[] = currentSelected.reduce((accumulator, currentFilter) => {\n      if (currentFilter.selected === null) {\n        return accumulator;\n      };\n\n      if (currentFilter.id === 'dropdownForStatus' && (isFilterItem(currentFilter.selected) || (Array.isArray(currentFilter.selected)))) {\n        return filterByStatus(accumulator, currentFilter.selected);\n      }\n\n      if ((currentFilter.id === 'priceFilter') && isFilterItem(currentFilter.selected)) {\n        return filterByPrice(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'inputForDeviceName' && isFilterItem(currentFilter.selected)) {\n        return filterByName(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'inputForDate' && isFilterItem(currentFilter.selected)) {\n        return filterByCreationDate(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'datePickerForRuntime' && !isFilterItem(currentFilter.selected) && !Array.isArray(currentFilter.selected)) {\n        return filterByCreationDatePicker(accumulator, currentFilter.selected);\n      }\n\n      return accumulator;\n    }, data);\n\n    return filteredData;\n  }\n\n  return data;\n}\n\n/**\n * Filter Bar Story Starts\n */\nexport const _FilterBar = () => {\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n  const [data, setData] = useState<ITableSampleData[]>(dataInitialState);\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(dataInitialState));\n  const [filters, setFilters] = useState<IFilterResult[]>([]);\n  /**\n * Story interaction section\n */\n  const singleFilter = boolean('Single Filter', false);\n  const hasShowMore = boolean('Has Show More', true);\n  // valid formats - https://date-fns.org/v2.25.0/docs/format\n  const resultsDateFormat = text('Results date format', 'yyyy-MM-dd HH:mm');\n  const datePickerHasApply = boolean('Datepicker has Apply', true);\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  const searchers: ISearchFilter[] = [\n    {\n      id: 'inputForDeviceName',\n      placeholder: language === 'english' ? 'Filter by Device Name...' : 'デバイス名前 フィルター',\n      name: language === 'english' ? 'Device Name' : 'デバイス名前',\n      // selected: {text:'OK', value: 'OK'}\n    },\n    {\n      id: 'inputForDate',\n      placeholder: language === 'english' ? 'Filter by Date' : '年月日 フィルター',\n      name: language === 'english' ? 'Date' : '年月日',\n      canHide: true,\n      showFieldText: language === 'english' ? 'Show Date Input' : '年月日 みる',\n    }\n  ]\n\n  const dropdowns: IFilterDropdownConfig[] = [\n    {\n      id: 'dropdownForStatus',\n      buttonText: language === 'english' ? 'Status' : 'ステータス',\n      list: language === 'english' ? statusValuesEng : statusValuesJp,\n      buttonIcon: 'Camera',\n      optionType: 'checkbox',\n      loadingText: language === 'english' ? 'Loading Status ...' : genericLoadingJp,\n      searchPlaceholder: language === 'english' ? 'Status...' : 'ステータス...',\n      searchResultText: language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese,\n      // selected: {text: language === 'english'? 'OK' : 'OKです。', value: 'ok' }\n    },\n    {\n      id: 'priceFilter',\n      canHide: true,\n      buttonText: language === 'english' ? 'Cost' : '価格',\n      list: language === 'english' ? costRangeEng : costRangeJap,\n      buttonIcon: 'Usage',\n      optionType: 'radio',\n      loadingText: language === 'english' ? 'Loading Cost...' : genericLoadingJp,\n      searchPlaceholder: language === 'english' ? 'Cost...' : '価格...',\n      searchResultText: language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese,\n    }\n  ]\n\n  const datePickers: IFilterDatePicker[] = [\n    {\n      id: 'datePickerForRuntime',\n      dateMode: 'interval',\n      buttonText: language === 'english' ? 'Date Range' : '日付範囲',\n      buttonIcon: 'DateTime',\n      dateTimeTextUpper: language === 'english' ? 'From' : 'から',\n      dateTimeTextLower: language === 'english' ? 'To' : 'まで',\n      timeZoneTitle: language === 'english' ? 'Timezone' : '時間帯',\n      cancelText: language === 'english' ? 'Cancel' : 'キャンセル',\n      applyText: language === 'english' ? 'Apply' : '完了',\n      lang: language === 'english' ? 'en' : 'ja',\n      selected: InitialSelectedDate,\n      availableRange: datesRange,\n      contentDays: dataContentDays,\n      hasApply: datePickerHasApply\n    }\n  ]\n\n  /**\n   * objects only for display\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const searchersConfig = object('Search Filters', searchers);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const dropdownsConfig = object('DropdownFilters', dropdowns);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const datePickersConfig = object('DatePickers', datePickers);\n  const filtersValues = action('onChangeCallback');\n\n  const handleFilters = useCallback((currentSelected: IFilterResult[]) => {\n    filtersValues(currentSelected);\n    const localData = language === 'english' ? sortDataBy(tableData, 'deviceName', true) : sortDataBy(tableDataJp, 'deviceName', true);\n    const tempData: ITableSampleData[] = [...localData];\n\n    if ((currentSelected.length === 0)) {\n      setData(localData);\n      setFilters([])\n    } else {\n      const filteredData = getFilteredData(currentSelected, tempData);\n      setData(filteredData);\n      setFilters(currentSelected);\n    }\n\n  }, [filtersValues, language])\n\n\n  useEffect(() => {\n    const localizeData = language === 'english' ? sortDataBy(tableData, 'deviceName', true) : sortDataBy(tableDataJp, 'deviceName', true);\n    const newData = getFilteredData(filters, localizeData);\n    setData(newData);\n  }, [filters, language])\n\n  useEffect(() => {\n    setRows(rowMaker(data));\n  }, [data])\n\n  return (\n    <Container>\n      <FilterBar\n        {...{ singleFilter, hasShowMore }}\n        searchersConfig={searchers}\n        dropdownsConfig={dropdowns}\n        datePickersConfig={datePickers}\n        onChangeCallback={handleFilters}\n        totalResults={rows.length}\n        showMoreText={language === 'english' ? showMoreEng : showMoreJp}\n        showLessText={language === 'english' ? showLessEng : showLessJp}\n        filtersTitle={language === 'english' ? 'Filters' : 'フィルター'}\n        resultTextTemplate={language === 'english' ? resultTextTemplateEng : resultTextTemplateJp}\n        clearText={language === 'english' ? clearEng : clearJp}\n        resultsDateFormat={resultsDateFormat}\n      />\n      <TypeTableWrapper>\n        <TypeTable {...{ selectCallback, toggleAllCallback, rows, sortCallback, }}\n          columnConfig={language === 'english' ? columnConfigSample : columnConfigSampleJp}\n          hasStatus\n          selectable\n          hasThumbnail\n          hasTypeIcon\n          defaultAscending\n          hasHeaderGroups\n        />\n      </TypeTableWrapper>\n    </Container>)\n}\n\nexport default FilterBarStory;"],"names":[],"sourceRoot":""}