{"version":3,"file":"main.74228554.iframe.bundle.js","mappings":";;;;AAyBA;AACA;;;;;;;AAOA;AACA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;AC7IA;;;ACNA;AC2BA;;;;;;;;;AASA;;;AAKA;;;AAGA;;;;;;;AASA;;;;;;;;AAUA;;;;;;;;;;;;AAcA;;;AAKA;;;;;ACzEA;;;;;;;ACGA;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;;AChBA;;ACFA;;;;;;AAQA;;;ACPA;AACA;;;AAGA;AACA;;AAIA;;;;AAMA;;;ACRA;AAWA;AAIA;AAQA;;ACtCA;;;ACsBA;;AC2BA;;AAOA;ACpDA;;ACCA;;ACLA;AAGA;;ACJA;;ACAA;;ACQA;;;AAKA;;ACdA;;ACAA;;;ACUA;;ACFA;;;ACEA;;;ACHA;;ACPA;;;;;ACWA;AAGA;AACA;;AAEA;;AAIA;;;;;AAOA;;ACWA;;;;;;;;;;;;;;;AAiBA;;;;;ACpDA;;;;;;;;;ACaA;;;;;;;;ACKA;;;;;;;;ACJA;;;;;;;;ACCA;;;;;;ACTA;AACA;;;ACPA;;;;;;AAQA;;AAIA;;;;;;AAQA;;;;AAMA;AAGA;;;;;;;AASA;;;;;;;;AChCA;AAGA;AACA;AACA;;;;;;AAMA;;;;;;;;;;ACHA;;;;;;AAQA;;AClBA;;ACGA;;ACAA;;;;;;ACCA;AAGA;AACA;ACRA;;;;;;;;;AASA;;AChBA;;ACCA;;ACAA;ACIA;AACA;;;;;;;;;AASA;ACXA;;;;;;;AAOA;;;;;;ACIA;;;AAIA;;ACNA;;;;;AAOA;;ACDA;;ACPA;;ACNA;;;;;;ACgCA;;AAIA;;ACpCA","sources":["webpack://scorer-ui-kit-storybook/./src/fonts/index.ts","webpack://scorer-ui-kit-storybook/./src/style.ts","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/AlertBar.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/MixAlerts/CardModalExample.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/MixAlerts/MixAlerts.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/Modals/LoginModalExample.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/Notification.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Alerts/Tooltip.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/CameraPanels/organisms/CameraPanels.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Filters/atoms/ToggleButton.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Filters/molecules/DatePicker.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Filters/molecules/FilterDropdown.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Filters/organisms/FilterBar.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Buttons/SplitButton.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/FileManagement/AreaUploadManager.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/FileManagement/CropTool.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/FileManagement/DropArea.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/FileManagement/InputFileButton.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/DurationSlider.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/Input.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/PasswordInput.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/PercentageSlider.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/RadioButton.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/SliderInput.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/SmallInput.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/Input/TextAreaField.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Form/SelectField.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/GlobalUI.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/TopBar.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/molecules/UtilityHeader.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/organisms/ContentLayout.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/organisms/NestedSplitLayout.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Global/organisms/SplitLayout.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Indicators/Spinner.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/Colors.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/Fonts.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/Icons.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/StatusIcon.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/atoms/BasicSearchInput.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/molecules/DebouncedSearcher.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/molecules/TabsWithIconBar.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Misc/molecules/TagList.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Pages/IntroductionText.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Pages/PageHeader.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Pages/PageTitle.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/atoms/EditableCell.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/atoms/TableHeaderTitle.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/atoms/TableRowThumbnail.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/ActionsTable.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/EditableTable.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/LoadingTable.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/TypeTable.stories.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/organisms/MultiActionsExample.tsx","webpack://scorer-ui-kit-storybook/./src/stories/Tables/organisms/TableMultiActions.stories.tsx"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nimport Lato from './Lato3Upr3M-VF.woff2';\nimport LatoItalic from './Lato3Ita3M-VF.woff2';\nimport MonoraleThin from './Monorale-Thin.woff';\nimport MonoraleThinItalic from './Monorale-ThinItalic.woff';\nimport MonoraleExtraLight from './Monorale-ExtraLight.woff';\nimport MonoraleExtraLightItalic from './Monorale-ExtraLightItalic.woff';\nimport MonoraleLight from './Monorale-Light.woff';\nimport MonoraleLightItalic from './Monorale-LightItalic.woff';\nimport MonoraleRegular from './Monorale-Regular.woff';\nimport MonoraleItalic from './Monorale-Italic.woff';\nimport MonoraleMedium from './Monorale-Medium.woff';\nimport MonoraleMediumItalic from './Monorale-MediumItalic.woff';\nimport MonoraleSemiBold from './Monorale-SemiBold.woff';\nimport MonoraleSemiBoldItalic from './Monorale-SemiBoldItalic.woff';\nimport MonoraleBold from './Monorale-Bold.woff';\nimport MonoraleExtraBold from './Monorale-ExtraBold.woff';\nimport MonoraleBlack from './Monorale-Black.woff';\n\n\nconst GlobalStyle = createGlobalStyle`\n\n@font-face {\n    font-family: \"Lato\";\n    src: url(${Lato}) format(\"woff2 supports variations\"),\n        url(${Lato}) format(\"woff2-variations\");\n    font-weight: 100 900;\n  }\n\n  @font-face {\n    font-family: \"Lato\";\n    font-style: italic;\n    src: url(${LatoItalic}) format(\"woff2 supports variations\"),\n        url(${LatoItalic}) format(\"woff2-variations\");\n    font-weight: 100 900;\n  }\n\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 100;\n    font-style: normal;\n    src: url(${MonoraleThin}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 100;\n    font-style: italic;\n    src: url(${MonoraleThinItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 200;\n    font-style: normal;\n    src: url(${MonoraleExtraLight}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 200;\n    font-style: italic;\n    src: url(${MonoraleExtraLightItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 300;\n    font-style: normal;\n    src: url(${MonoraleLight}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 300;\n    font-style: italic;\n    src: url(${MonoraleLightItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 400;\n    font-style: normal;\n    src: url(${MonoraleRegular}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 400;\n    font-style: italic;\n    src: url(${MonoraleItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 500;\n    font-style: normal;\n    src: url(${MonoraleMedium}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 500;\n    font-style: italic;\n    src: url(${MonoraleMediumItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 600;\n    font-style: normal;\n    src: url(${MonoraleSemiBold}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 600;\n    font-style: italic;\n    src: url(${MonoraleSemiBoldItalic}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 700;\n    font-style: normal;\n    src: url(${MonoraleBold}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 800;\n    font-style: normal;\n    src: url(${MonoraleExtraBold}) format('woff');\n    font-display: fallback;\n  }\n\n  @font-face {\n    font-family: Monorale;\n    font-weight: 900;\n    font-style: normal;\n    src: url(${MonoraleBlack}) format('woff');\n    font-display: fallback;\n  }\n\n`;\nexport default GlobalStyle;","import { createGlobalStyle, DefaultTheme } from 'styled-components';\nimport { BaseStyles } from 'scorer-ui-kit';\n\ninterface MyThemeProps extends DefaultTheme {\n  theme: {\n    styles: {\n      global: {\n        background: {}\n      }\n    }\n  }\n}\n\nconst GlobalStyle = createGlobalStyle<MyThemeProps>`\n  ${BaseStyles};\n`\nexport default GlobalStyle;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean } from \"@storybook/addon-knobs\";\n\nimport {AlertBar} from 'scorer-ui-kit';\n\nconst Container = styled.div`\n  margin: 100px;\n`;\n\nexport default {\n  title: 'Alerts/atoms',\n  component: AlertBar,\n  decorators: []\n};\n\nexport const _AlertBar = () => {\n  const message = text(\"Message\", 'Look Out!');\n  const type = select(\"Type\", { Error: 'error', Warning: 'warning', Info: 'info', Success:'success', Neutral:'neutral'}, 'error');\n  const hideCloseButton = boolean('Hide close icon', false);\n\n  return <Container><AlertBar {...{message, type, hideCloseButton}} ></AlertBar></Container>;\n\n};\n","import React from 'react';\nimport styled from 'styled-components';\n// import GhostLogo from '../../svg/ghost-logo.svg';\n// import { LoginScreen } from '../../../../../example/src/svg/index';\n\nimport {\n  Button,\n  resetButtonStyles,\n  useNotification,\n  INotificationProps,\n  useModal,\n} from 'scorer-ui-kit';\n// These is the code related to the logo background but this asses are in the Example pages folder.\n// I left the code here in case this needs to be moved back or into the UI Library folder to be put it back.\n//\n// const LogoBackground = styled.img`\n//   position: absolute;\n//   top: -545px;\n//   left: -570px;\n//   width: 1076px;\n//   height: auto;\n//   object-fit: contain;\n//   mix-blend-mode: overlay;\n// `;\n\n// const Logo = styled(LoginScreen)`\n// width: 300px;\n// object-fit: contain;\n// position: absolute;\n// top: 50%;\n// left: 65%;\n// transform: translate(-50%, -50%);\n// `;\n\nconst StyledButton = styled.button`\n  ${resetButtonStyles};\n  color: var(--grey-9);\n  font-size: 14px;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: italic;\n  line-height: 1.79;\n  color: var(--grey-9);\n  display: block;\n`;\n\nconst ButtonGroup = styled.div`\ntext-align: center;\nmargin-top: 10px;\n${StyledButton} {\n  margin: 15px auto 0 auto;\n}\n`;\n\nconst CardCover = styled.div`\n  height: 210px;\n  border-radius: 5px 5px 0 0;\n  position: relative;\n  z-index:99;\n  background-image: linear-gradient(114deg, hsl(250, 60%, 62%), hsl(0, 46%, 54%));\n  overflow: hidden;\n`;\n\nconst CardTitle = styled.div`\nfont-size: 20px;\nfont-weight: 500;\nfont-stretch: normal;\nfont-style: normal;\nline-height: normal;\nletter-spacing: normal;\ncolor: var(--grey-11);\n`;\n\nconst CardContent = styled.div`\n  padding: 30px 40px;\n  font-size: 14px;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: 1.79;\n  letter-spacing: normal;\n  color: var(--grey-10);\n  p {\n    margin: 1.4rem 0\n  }\n`;\n\nconst CardModal = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CardModalExample: React.FC = () => {\n  const { sendNotification } = useNotification();\n  const { setModalOpen } = useModal();\n\n  // Notification to tell the user it was updated\n  const notiInfoSettings: INotificationProps = {\n    type: 'info',\n    message: 'You have enabled that requested process',\n  }\n\n  return (\n    <CardModal>\n      <CardCover>\n        {/* <Logo /> */}\n        {/* <LogoBackground src={GhostLogo} /> */}\n      </CardCover>\n      <CardContent>\n        <CardTitle>Welcome To Modal</CardTitle>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pharetra porta mi, eget sollicitudin orci blandit eget. Morbi risus tortor.</p>\n        <p>Vivamus condimentum mi ac nibh faucibus, ac vehicula libero fermentum. Aenean et nisl non enim elementum vestibulum sed sit.</p>\n        <ButtonGroup>\n          <Button\n            onClick={() => {\n              sendNotification(notiInfoSettings);\n              setModalOpen(false);\n            }}\n          >Enable Now</Button>\n          <StyledButton\n            onClick={() => {\n              setModalOpen(false);\n            }}\n          >Enable Later</StyledButton>\n        </ButtonGroup>\n      </CardContent>\n    </CardModal>\n  )\n}\n\nexport default CardModalExample;","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport CardModalExample from './CardModalExample';\n\nimport {\n  useNotification,\n  Button,\n  NotificationProvider,\n  ModalProvider,\n  useModal\n} from 'scorer-ui-kit';\n\nconst Container = styled.div`\n  margin: 100px 20px 20px 20px;\n  display: grid;\n  grid-template-columns: 200px;\n  row-gap: 15px;\n`;\n\nexport default {\n  title: 'Alerts/Mix',\n  components: useNotification,\n  decorator: []\n}\n\nconst custom: ReactElement = <CardModalExample />\n\nconst ModalAndNotification: React.FC = () => {\n\n  const { createModal } = useModal();\n\n  const createCustomModal = () => {\n    createModal({\n      isCloseEnable: false,\n      width: '480px',\n      padding: false,\n      customComponent: custom,\n    })\n  }\n\n  return (\n    <Button\n      design='secondary'\n      size='small'\n      onClick={() => { createCustomModal() }}\n    >Open Welcome Modal</Button>\n  )\n}\n\nexport const _MixAlertsExample = () => {\n\n  // Providers should be at main Index level, these are here just for the story example\n  return (\n    <Container>\n      <NotificationProvider>\n        <ModalProvider>\n          <ModalAndNotification />\n        </ModalProvider>\n      </NotificationProvider>\n    </Container>\n  );\n}","import React, {useCallback, ChangeEvent, useState } from 'react';\nimport styled, {css} from 'styled-components';\nimport {\n  ButtonWithLoading,\n  TextField,\n  PasswordField,\n  AlertBar,\n  Form,\n  useModal,\n} from 'scorer-ui-kit';\n\nconst Container = styled.div``;\n\nconst Title = styled.div`\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n  color: var(--grey-11);\n  position:relative;\n  margin-bottom: 45px;\n`;\n\nconst Box = styled.div<{ margin?: string; flex?: string; }>`\n  margin-top:30px;\n  button{\n    width: 100%;\n  }\n  ${({ margin }) => margin && css`margin:${margin};`}\n  ${({ flex }) => flex && css`\n    flex:${flex};\n    justify-content: flex-end;\n    display: flex;\n    flex-direction: column;\n  `}\n`;\n\ninterface Alert {\n  type: 'error'|'warning'|'info'|'success';\n  message: string;\n}\n\nconst LoginModalExample : React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState<Alert | null>(null);\n  const [form, setForm] = useState({ username: '', password: '' });\n  const onFieldChange = useCallback(\n    (key: 'username' | 'password') => ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n      setForm({ ...form, [key]: value });\n    }, [form]);\n\n  const { setModalOpen } = useModal();\n\n  // Fake login for the example\n  const onLogin = useCallback((params: { username: string; password: string })  => {\n    if(params.username === 'user' && params.password === 'fakepass123') {\n      return true;\n    }\n    throw Error(`The username: ${params.username}  and password provided does not match`)\n  },[]);\n\n  const onSubmit = useCallback(async (params: { username: string; password: string }) => {\n    let isSuccess = false;\n    setLoading(true);\n    setAlert(null);\n    try {\n      const response = await onLogin(params);\n      console.log(response, 'login');\n      isSuccess = true;\n    } catch (error) {\n      if(error instanceof Error) {\n        console.log(`got error: ${error.message}`);\n        setAlert({\n          message: error.message,\n          type: 'error'\n        });\n      } else {\n        console.warn(error);\n      }\n    }\n    setLoading(false);\n    return isSuccess;\n  }, [onLogin]);\n\n  const validateFields = (params: { username: string; password: string }) => {\n    if(params.username === '') {\n      setAlert({\n        message: 'User should not be empty',\n        type: 'error'\n      });\n      return false;\n    }\n\n    if(params.password === '') {\n      setAlert({\n        message: 'Password should not be empty',\n        type: 'error'\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleModalSubmit = useCallback(async (e: React.FormEvent<HTMLFormElement | HTMLButtonElement>) => {\n    e.preventDefault();\n\n    // Validate inputs and show errors\n    const areInputsValid = validateFields(form);\n\n    // if inputs are not valid return to allow user to correct before submiting\n    if(!areInputsValid) { return; }\n\n    const loginSuccess = await onSubmit(form);\n\n    // if there was a login error return to allow user to correct and retry\n    if(!loginSuccess) {return;}\n\n    // if there were no errors close modal\n    setModalOpen(false);\n\n  },[onSubmit, setModalOpen, form]);\n\n\n  return(\n    <Container>\n    <Form onSubmit={handleModalSubmit}>\n    <Title>Sign In To Your Account</Title>\n    <TextField\n      fieldState='default'\n      required\n      label='Username'\n      onChange={onFieldChange('username')}\n      value={form.username}\n      name='username'\n      id='username'\n    />\n    <PasswordField\n      fieldState='default'\n      required\n      label='Password'\n      onChange={onFieldChange('password')}\n      value={form.password}\n      name='password'\n      id='password'\n    />\n    {alert && <AlertBar type={alert.type} message={alert.message} />}\n    <Box flex='1'>\n      <ButtonWithLoading loading={loading} type='submit' onClick={handleModalSubmit}>Login</ButtonWithLoading>\n    </Box>\n  </Form>\n    </Container>\n  );\n}\n\nexport default LoginModalExample;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { text, boolean, select } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\nimport {\n  useNotification,\n  Button,\n  INotificationProps,\n  NotificationProvider,\n} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\nconst Container = styled.div`\n  margin: 100px 20px 20px 20px;\n  display: grid;\n  grid-template-columns: 200px;\n  row-gap: 15px;\n`;\n\nexport default {\n  title: 'Alerts/atoms',\n  components: useNotification,\n  decorator: []\n}\n\nconst NotificationExample: React.FC<INotificationProps> = (notiSettings) => {\n  const { sendNotification, clearNotifications } = useNotification();\n\n  const [notificationSettings, setNotificationSettings] = useState(notiSettings);\n\n  useEffect(() => {\n    setNotificationSettings(notiSettings);\n  }, [notiSettings])\n\n  return (\n    <>\n      <Button\n        design='secondary'\n        size='small'\n        onClick={() => {\n          sendNotification(notificationSettings)\n        }\n        }\n      >Send notification</Button>\n      <Button onClick={() => clearNotifications()}>\n        Clear Notifications\n      </Button>\n    </>\n  )\n}\n\n  // Provider should be at main Index level, it's here just for the story example\nexport const _Notification = () => {\n\n  const isPin = boolean('Is Pinned', false);\n  const type = select(\"Type\", { Error: 'error', Warning: 'warning', Info: 'info', Success: 'success', Neutral: 'neutral' }, 'info');\n  const msg = text('Message', 'This is a message example');\n  const iconList = {'': '', ...generateIconList()};\n  const icon = select(\"Icon\", iconList, Object.keys(iconList)[0]);\n  const actionText = text('Action Text Button', '');\n  const onTextBtnClick = action('Action was clicked');\n  const closeCall = action('The message was closed by the user');\n\n  const handleActionTextCall = () => {\n    const text = `User clicked on [${actionText}] button`;\n    onTextBtnClick(text);\n  }\n\n  return (\n    <Container>\n      <NotificationProvider>\n        <NotificationExample\n          type={type}\n          message={msg}\n          icon={icon}\n          closeCallback={closeCall}\n          actionTextButton={actionText}\n          onTextButtonClick={handleActionTextCall}\n          isPinned={isPin}\n        />\n      </NotificationProvider>\n    </Container>\n  );\n}","import { boolean, select, text } from \"@storybook/addon-knobs\";\nimport React, { useRef } from \"react\";\nimport { PageTitle, Tooltip } from \"scorer-ui-kit\";\nimport { generateIconList } from \"../helpers\";\nimport styled from \"styled-components\";\n\nexport default {\n  title: 'Alerts/atoms',\n  component: Tooltip,\n  decorators: []\n};\n\nconst Container = styled.div``;\n\nconst Content = styled.div`\n  margin: 20px 0;\n`;\n\nconst HoverSpan = styled.span`\n  color: var(--primary-11);\n  display: inline-block;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const _Tooltip = () => {\n\n  const message = text(\"Message\", \"This is the tooltip of the hovering element\");\n  const type = select(\"Type\", { Warning: 'warning', Info: 'info', Success: 'success', Neutral: 'neutral' }, 'info');\n  const noIcon = boolean('No Icon', false);\n  const iconList = { '': '', ...generateIconList() };\n  const icon = select(\"Icon\", iconList, 'Information');\n  const tooltipPosition = select(\"Tooltip Position\", { TopLeft: 'top-left', Top: 'top', TopRight: 'top-right', BottomLeft: 'bottom-left', Bottom: 'bottom', BottomRight: 'bottom-right', LeftTop: 'left-top', Left: 'left', LeftBottom: 'left-bottom', RightTop: 'right-top', Right: 'right', RightBottom: 'right-bottom' }, 'top-right')\n\n  const exampleTriggerA = useRef<HTMLSpanElement>(null);\n  const exampleTriggerB = useRef<HTMLSpanElement>(null);\n  const exampleTriggerC = useRef<HTMLSpanElement>(null);\n  const exampleTriggerD = useRef<HTMLSpanElement>(null);\n  const exampleTriggerE = useRef<HTMLSpanElement>(null);\n\n\n  return (\n    <Container>\n      <PageTitle\n        title=\"Page with tooltips\"\n      />\n      <Content>\n        The tooltip is a common graphical user interface (GUI) element in which, when <HoverSpan ref={exampleTriggerA}>hovering over</HoverSpan> a screen element or component, a text box displays information about that element, such as a description of a button's function, what an abbreviation stands for, or the exact absolute time stamp over a relative time (\"… ago\"). In this paragraph the tooltip will be display in a dynamic position.\n      </Content>\n      <Content>\n        The tooltip is a common graphical user interface (GUI) element in which, when <HoverSpan ref={exampleTriggerB}>hovering over</HoverSpan> a screen element or component, a text box displays information about that element, such as a description of a button's function, what an abbreviation stands for, or the exact absolute time stamp over a relative time (\"… ago\"). In this paragraph the tooltip will be display in a dynamic position.\n      </Content>\n      <Content>\n        The tooltip is a common graphical user interface (GUI) element in which, when <HoverSpan ref={exampleTriggerC}>hovering over</HoverSpan> a screen element or component, a text box displays information about that element, such as a description of a button's function, what an abbreviation stands for, or the exact absolute time stamp over a relative time (\"… ago\"). In this paragraph the tooltip will be display in a dynamic position.\n      </Content>\n      <Content>\n        The tooltip is a common graphical user interface (GUI) element in which, when <HoverSpan ref={exampleTriggerD}>hovering over</HoverSpan> a screen element or component, a text box displays information about that element, such as a description of a button's function, what an abbreviation stands for, or the exact absolute time stamp over a relative time (\"… ago\"). In this paragraph the tooltip will be display in a dynamic position.\n      </Content>\n      <Content>\n        This tooltip <HoverSpan ref={exampleTriggerE}>message</HoverSpan> position is fixed,  you can update it with the property tool position with the knobs bellow .\n      </Content>\n      <Tooltip tooltipFor={exampleTriggerA} icon={noIcon ? undefined : icon} {...{ message }} />\n      <Tooltip tooltipFor={exampleTriggerB} icon={noIcon ? undefined : icon} {...{ message }} />\n      <Tooltip tooltipFor={exampleTriggerC} icon={noIcon ? undefined : icon} {...{ message }} />\n      <Tooltip tooltipFor={exampleTriggerD} icon={noIcon ? undefined : icon} {...{ message }} />\n      <Tooltip tooltipFor={exampleTriggerE} maxWidth='200px' icon={noIcon ? undefined : icon} {...{ type, message, tooltipPosition }} />\n    </Container>\n  )\n}","import React, { ReactElement, useMemo } from 'react';\nimport styled, {css} from 'styled-components';\nimport { CameraPanels, ICameraPanel, CameraPanelWrapper, TagList } from 'scorer-ui-kit';\nimport { boolean, select, text } from '@storybook/addon-knobs';\nimport { generateIconList } from '../../helpers';\nimport Photo from '../../assets/placeholder.jpg';\nimport { action } from '@storybook/addon-actions';\n\nexport default {\n  title: 'CameraPanels/organisms',\n  component: CameraPanels,\n  decorators: []\n};\n\nconst Container = styled.div<{ showCustomComponent?: boolean }>`\n  max-width: 1200px;\n\n  ${({showCustomComponent}) =>  showCustomComponent && css`\n    ${CameraPanelWrapper} {\n      height: 250px;\n    }\n  `};\n`;\n\nconst TagListWrapper = styled.div`\n  padding: 10px;\n`;\n\nconst Title = styled.div`\n  color: var(--grey-10);\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nconst customBottom: ReactElement =\n  <TagListWrapper>\n    <Title>Custom Component Example</Title>\n    <TagList\n      tagsConfig={[\n        {\n          icon: 'MetaCategories',\n          label: 'Shop A',\n          weight: 'light',\n          size: 12\n        },\n        {\n          icon: 'MetaTags',\n          label: 'Example',\n          weight: 'light',\n          size: 12\n        },\n        {\n          icon: 'MetaTags',\n          label: 'Smart',\n          weight: 'light',\n          size: 12\n        }\n      ]}\n    />\n  </TagListWrapper>\n\n\nexport const _CameraPanels = () => {\n  const iconList = {'': '', ...generateIconList()};\n  const showCustomComponent = boolean('Show Custom Component Example', false)\n  const status = select('Type', { Error: 'error', Warning: 'warning', Info: 'info', Success: 'success', Neutral: 'neutral' }, 'neutral');\n  const noticeIcon = select('Status Icon', iconList, 'Information');\n  const hasNotice = boolean('Has Notice', false);\n  const noticeMessage = text('Notice Message', 'Please wait while the first stream is processed.');\n  const noticeTitle = text('Notice Title', 'Initial Stream Pending');\n  const isEmptyWithIcon = boolean('Has Empty Stream with Icon', false);\n  const emptyIcon = select('Empty stream icon', iconList, '')\n\n\n  const deviceIcon = select('Device Icon', iconList, 'Camera');\n  const hideIcon = boolean('Hide Panel Data Icon', false);\n  const leftTitle = text('Left Title', `Location - Zone`)\n  const leftSubTitle = text('Left SubTitle', 'Camera Name');\n  const rightTitle = text('Right Title', 'Analysis');\n  const rightSubTitle = text('Right Subtitle', 'PeopleCount');\n  const reRouting = action('Changing to camera page');\n\n\n  const ImagePanel: ICameraPanel = useMemo(() => ({\n    streamProps: {\n      src: Photo,\n      mediaType: 'img',\n      isEmptyWithIcon,\n      noticeTitle,\n      noticeMessage,\n      status,\n      noticeIcon,\n      hasNotice,\n      emptyIcon\n    },\n    panelMetaData: {\n      deviceIcon,\n      leftSubTitle,\n      leftTitle,\n      rightTitle,\n      rightSubTitle,\n      hideIcon,\n    },\n    customBottom: showCustomComponent ? customBottom : undefined,\n\n    panelOnClick: () => { reRouting() },\n  }), [isEmptyWithIcon, noticeTitle, noticeMessage, status, noticeIcon, hasNotice, emptyIcon, deviceIcon, leftSubTitle, leftTitle, rightTitle, rightSubTitle, hideIcon, showCustomComponent, reRouting])\n\n  const VideoPanel: ICameraPanel = useMemo(() => ({\n    streamProps: {\n      src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n      mediaType: 'video',\n      videoOptions: { autoPlay: false, controls: true },\n      isEmptyWithIcon,\n      noticeTitle,\n      noticeMessage,\n      status,\n      noticeIcon,\n      hasNotice,\n      emptyIcon\n    },\n    panelMetaData: {\n      deviceIcon,\n      leftSubTitle,\n      leftTitle,\n      rightTitle,\n      rightSubTitle,\n      hideIcon\n    },\n    customBottom: showCustomComponent ? customBottom : undefined,\n  }), [isEmptyWithIcon, noticeTitle, noticeMessage, status, noticeIcon, hasNotice, emptyIcon, deviceIcon, leftSubTitle, leftTitle, rightTitle, rightSubTitle, hideIcon, showCustomComponent])\n\n\n  const panelConfig: ICameraPanel[] = useMemo(() => [\n    ImagePanel, VideoPanel, ImagePanel, VideoPanel, ImagePanel, VideoPanel, ImagePanel, VideoPanel, ImagePanel, VideoPanel, ImagePanel\n  ], [ImagePanel, VideoPanel]);\n\n  return (\n    <Container {...{showCustomComponent}}>\n      <CameraPanels\n        panels={panelConfig}\n      />\n    </Container>\n  )\n}\n","import React, { useCallback, useState } from \"react\";\nimport { ToggleButton } from \"scorer-ui-kit\";\nimport { boolean, object, select, text } from \"@storybook/addon-knobs\";\nimport { action } from \"@storybook/addon-actions\";\nimport styled from \"styled-components\";\n\nexport default {\n  title: 'Filters/atoms',\n  component: ToggleButton,\n  decorators: []\n};\n\nconst layoutOptions = [\n  { text: 'Grid', value: 'grid', icon: 'LayoutGrid' },\n  { text: 'List', value: 'list', icon: 'LayoutList' }\n]\n\nconst CameraData = styled.div``;\nconst Camera = styled.li``;\n\nconst Container = styled.div``;\nconst DataGroup = styled.ol<{ layout: string }>`\n  margin-top: 20px;\n  display: grid;\n  ${({ layout }) => layout === 'grid' &&\n    `\n      list-style-type: none;\n      grid-template-columns: repeat(3, 300px);\n      gap: 16px;\n        ${Camera} {\n          padding: 100px 20px;\n          border: 1px solid var(--grey-9);\n          text-align: center;\n        }\n    `\n  };\n`;\n\nconst StatusSpan = styled.span<{ isOnline?: boolean }>`\n    ${({ isOnline }) => isOnline ?\n    `\n      color: var(--success);\n    `\n    :\n    `\n      color: var(--warning);\n    `}\n  `;\n\nexport const _ToggleButton = () => {\n  const [selectedLayout, setSelectedLayout] = useState(0)\n\n  const disabled = boolean('Disabled', false);\n  const design = select('Design type', { Default: 'default', Basic: 'basic' }, 'basic');\n  const categoryLabel = text('Category Label', 'Layout');\n  const options = object('Options', layoutOptions);\n  const showToggleValue = action('Button Value: ');\n\n  const onToggle = useCallback((index: number, value: string | number) => {\n    setSelectedLayout(index);\n    showToggleValue(value);\n  }, [showToggleValue])\n\n  return (\n    <Container>\n      <ToggleButton\n        {...{\n          categoryLabel,\n          options,\n          onToggle,\n          disabled,\n          design,\n          selectedIndex: selectedLayout\n        }} />\n\n      <DataGroup layout={layoutOptions[selectedLayout].value}>\n        <Camera>\n          <CameraData>\n            Camera01 - <StatusSpan isOnline>Online</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera02 - <StatusSpan isOnline>Online</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera03 - <StatusSpan>OffLine</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera04 - <StatusSpan>OffLine</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera05 - <StatusSpan>OffLine</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera06 - <StatusSpan>OffLine</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera07 - <StatusSpan isOnline>Online</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera08 - <StatusSpan isOnline>Online</StatusSpan>\n          </CameraData>\n        </Camera>\n        <Camera>\n          <CameraData>\n            Camera09 - <StatusSpan>Online</StatusSpan>\n          </CameraData>\n        </Camera>\n      </DataGroup>\n    </Container>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { boolean, object, select, text } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport { DatePicker, FilterDropdownContainer } from 'scorer-ui-kit';\nimport { dataContentDays, datesRange, InitialSelectedDate } from '../../helpers/datePicker_sample';\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nexport default {\n  title: 'Filters/molecules',\n  component: DatePicker,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 1 }\n  }\n};\n\nconst exampleCallback = <T extends Function>(fn: T): T => {\n  /** A toString to render the function in storybook */\n  // eslint-disable-next-line no-param-reassign\n  fn.toString = () => '   updateCallback: (data: DateInterval | Date) => {}';\n  return fn;\n};\n\nexport const _DatePicker = () => {\n  const language = select('Language', { English: 'en', Japanese: 'ja' }, 'ja');\n  const initialValueObj = object('Initial Value', InitialSelectedDate);\n  const dateMode = select('Date Mode', { single: 'single', interval: 'interval' }, 'interval');\n  const timeMode = select('Time Mode', { off: 'off', single: 'single', interval: 'interval' }, 'interval');\n  const dateTimeTextUpper = text('Date Time Text Upper', 'From');\n  const dateTimeTextLower = text('Date Time Text Lower', 'To');\n  const timeZoneTitle = text('Time Zone Title', 'Timezone');\n  const timeZoneValueTitle = text('Time Zone Value', 'JST');\n  const updateCallback = action('Date / Time Updated');\n  const sendRange = boolean('Send Available Range', true);\n  const availableRangeDates = object('Available Range', datesRange);\n  const contentDaysObj = object('Content Days', dataContentDays);\n  const showContentDays = boolean('Show Content Days', true)\n\n  return (\n    <Container>\n      <FilterDropdownContainer>\n        <DatePicker {...{\n          timeMode,\n          dateMode,\n          timeZoneValueTitle,\n        }}\n          updateCallback={exampleCallback(updateCallback)}\n          dateTimeTextUpper={language === 'ja' ? 'から' : dateTimeTextUpper}\n          dateTimeTextLower={language === 'ja' ? 'まで' : dateTimeTextLower}\n          timeZoneTitle={language === 'ja' ? '時間帯' : timeZoneTitle}\n          lang={language}\n          initialValue={initialValueObj}\n          availableRange={sendRange ? availableRangeDates : undefined}\n          contentDays={showContentDays ? contentDaysObj : undefined}\n        />\n      </FilterDropdownContainer>\n    </Container>);\n};\n","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { boolean, text, select, number } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport {\n  FilterDropdown,\n  IFilterValue,\n  PageHeader,\n} from 'scorer-ui-kit';\nimport {\n  searchTemplateResultEnglish,\n  searchTemplateResultJapanese,\n  loadingTagsEnglish,\n  genericLoadingJp,\n  emptyResultsEnglish,\n  emptyResultsJapanese,\n} from '../../helpers/data_samples';\nimport { generateIconList } from '../../helpers';\n\nexport default {\n  title: 'Filters/molecules',\n  component: FilterDropdown,\n  decorators: []\n};\n\nconst Content = styled.div``;\nconst Divider = styled.div``;\n\nconst Wrapper = styled.div`\n  margin: 100px;\n  display: inline-block;\n`;\n\n\nconst englishDataList = [\n  { text: 'Ramen', value: 0 },\n  { text: 'Takoyaki', value: 1 },\n  { text: 'Gyoza', value: 2 },\n  { text: 'Tempura', value: 3 },\n  { text: 'Sushi', value: 4 },\n  { text: 'Natto', value: 5 },\n  { text: 'Sashimi', value: 6 },\n];\n\nconst japaneseDataList = [\n  { text: 'ラーメン', value: 0 },\n  { text: '蛸焼き', value: 1 },\n  { text: '餃子', value: 2 },\n  { text: '天婦羅', value: 3 },\n  { text: 'すし', value: 4 },\n  { text: '納豆', value: 5 },\n  { text: 'お造り', value: 6 },\n];\n\nconst englishTextList = [\n  { text: 'Super Spicy', value: 0 },\n  { text: 'Spicy', value: 1 },\n  { text: 'Mild', value: 2 },\n  { text: 'Sweet', value: 3 }\n];\nconst japaneseTextList = [{ text: '超辛い', value: 0 }, { text: '辛い', value: 1 }, { text: '中華い', value: 2 }, { text: '甘口', value: 3 }];\n\nconst yearList = [\n  { text: '1900', value: 1900 },\n  { text: '1910', value: 1920 },\n  { text: '1930', value: 1930 },\n  { text: '1950', value: 1950 },\n  { text: '1960', value: 1960 },\n  { text: '1970', value: 1970 },\n  { text: '1980', value: 1980 },\n  { text: '1990', value: 1990 },\n  { text: '2000', value: 2000 },\n  { text: '2010', value: 2010 },\n  { text: '2020', value: 2020 }\n];\n\nconst englishPayList = [{ text: 'Card', value: 0 }, { text: 'Cash', value: 1 }, { text: 'IC Card', value: 2 }];\nconst japanesePayList = [{ text: 'カード', value: 0 }, { text: '現金', value: 1 }, { text: 'IC カード', value: 2 }]\n\n\nconst baseExample = [\n  { text: \"Adipiscing\", value: 0 },\n  { text: \"Amet\", value: 1 },\n  { text: \"Consectetur\", value: 2 },\n  { text: \"Dolor sit\", value: 3 },\n  { text: \"Lorem ipsum\", value: 4 },\n  { text: \"Vestibulum\", value: 5 },\n  { text: \"Minim Veniam\", value: 6 },\n  { text: \"Consequat\", value: 7 },\n  { text: \"Fugiat Nulla\", value: 8 },\n];\n\nexport const _FilterDropdown = () => {\n  const iconList = generateIconList();\n\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n  const buttonText = text('Text', 'Department');\n  const buttonIcon = select(\"Button Icon\", iconList, iconList['MetaCategories']);\n  const disabled = boolean('disable', false);\n  const isLoading = boolean('Is Loading', false);\n  const design = select('Design type', {Default: 'default', Basic: 'basic'}, 'default')\n  const optionType = select(\"Option Type\", { text: \"text\", checkbox: \"checkbox\", radio: \"radio\" }, \"checkbox\")\n  const loadingText = text('Loading Text', 'Loading Tags...');\n  const maxDisplayedItems = number('Max Displayed Items', 6);\n  const selectedItems = action('Currently Selected');\n  const foodSelection = action('Food selected');\n  const spiceAction = action('Spicy level');\n  const paymentAction = action('Payment type');\n  const yearAction = action('Years');\n\n  const [selectedObj, setSelectedObj] = useState<IFilterValue>(null); // this could also start with values [{ text: 'Ramen', value: 0 }]\n  const [textArraySelected, setTextArraySelected] = useState<IFilterValue>(null); // this could also start with values ['Spicy','Sweet']\n  const [wordSelected, setWordSelected] = useState<IFilterValue>(language === 'english' ? { text: 'Card', value: 0 } : { text: 'カード', value: 0 }); // this could also start with value 'Card' or null\n  const [numberSelected, setNumberSelected] = useState<IFilterValue>([{ text: '1990', value: 1990 }]); // this could also start with value 1990 or null\n  const [baseSelected, setBaseSelected] = useState<IFilterValue>(null);\n\n  const handleSelectItemType = useCallback((newSelection: IFilterValue) => {\n    foodSelection(newSelection);\n    setSelectedObj(newSelection);\n  }, [foodSelection]);\n\n  const handleTextListSelect = useCallback((newSelection: IFilterValue) => {\n    spiceAction(newSelection);\n    setTextArraySelected(newSelection);\n  }, [spiceAction]);\n\n  const handleNumberListSelect = useCallback((newSelection: IFilterValue) => {\n    yearAction(newSelection);\n    setNumberSelected(newSelection);\n  }, [yearAction]);\n\n  const handleWordSelect = useCallback((newSelection: IFilterValue) => {\n    paymentAction(newSelection);\n    setWordSelected(newSelection);\n  }, [paymentAction]);\n\n  const handleBaseExample = useCallback((newSelection: IFilterValue) => {\n    selectedItems(newSelection);\n    setBaseSelected(newSelection);\n  }, [selectedItems]);\n\n\n  return <Content>\n    <Wrapper key='eje-0'>\n      <PageHeader title='Base Example'\n        introductionText=\"This example doesn't have filter for options.\"\n      />\n      <FilterDropdown\n        {...{\n          disabled,\n          isLoading,\n          buttonText,\n          maxDisplayedItems,\n          buttonIcon,\n          design,\n        }}\n        list={baseExample}\n        onSelect={handleBaseExample}\n        optionType='checkbox'\n        selected={baseSelected}\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n      />\n    </Wrapper>\n    <Wrapper key='eje-1'>\n      <PageHeader title='Data Object'\n        introductionText=\"Array of IFilterList [{text: 'Option1', value: 1 }, {text: 'Option2', value: 2 }]\"\n      />\n      <FilterDropdown {...{\n        buttonIcon,\n        disabled,\n        isLoading,\n        design,\n        loadingText,\n        maxDisplayedItems,\n      }}\n        list={language === 'english' ? englishDataList : japaneseDataList}\n        buttonText={language === 'english' ? 'Menu' : 'メニュー'}\n        selected={selectedObj}\n        optionType={optionType}\n        onSelect={handleSelectItemType}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Menu options...' : 'メニュー...'}\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Divider />\n    <Wrapper key='eje-2'>\n      <PageHeader title='Text type'\n        introductionText=\".\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems\n        }}\n        list={language === 'english' ? englishTextList : japaneseTextList}\n        buttonText={language === 'english' ? 'Spice level' : 'ピリ辛'}\n        selected={textArraySelected}\n        onSelect={handleTextListSelect}\n        optionType='text'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Spice options...' : 'ピリ辛...'}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-3'>\n      <PageHeader title='Radio type'\n        introductionText=\".\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems\n        }}\n        list={language === 'english' ? englishPayList : japanesePayList}\n        buttonText={language === 'english' ? 'Pay Method' : '支払方法'}\n        selected={wordSelected}\n        onSelect={handleWordSelect}\n        optionType='radio'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp }\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Pay Methods...' : '支払方法...'}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-4'>\n      <PageHeader title='Checkbox type'\n        introductionText=\"Array of IFilterList with numbers [{text: '1900', value:1910}, {text:'1910', value: 1910}]\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems,\n        }}\n        buttonText={language === 'english' ? 'Year' : '年'}\n        selected={numberSelected}\n        list={yearList}\n        onSelect={handleNumberListSelect}\n        optionType='checkbox'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchPlaceholder={language === 'english' ? 'Years...' : '2020...'}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-5'>\n      <PageHeader title='Empty Example'\n        introductionText=\"Empty list is been sent.\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems,\n        }}\n        buttonText={language === 'english' ? 'Tags' : 'タグー'}\n        selected={numberSelected}\n        list={[]}\n        onSelect={handleNumberListSelect}\n        optionType='checkbox'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchPlaceholder={language === 'english' ? 'Filter tags…' : 'フィルタータグ...'}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        emptyResultText={language === 'english' ? emptyResultsEnglish : emptyResultsJapanese}\n        hasOptionsFilter\n      />\n    </Wrapper>\n  </Content>\n};","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { select, object, boolean, text } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\nimport {\n  FilterBar,\n  ISearchFilter,\n  TypeTable,\n  IFilterDropdownConfig,\n  IFilterResult,\n  IFilterDatePicker,\n  isFilterItem,\n} from 'scorer-ui-kit'\n\nimport {\n  tableData,\n  tableDataJp,\n  columnConfigSample,\n  ITableSampleData,\n  columnConfigSampleJp,\n  statusValuesEng,\n  statusValuesJp,\n  genericLoadingJp,\n  searchTemplateResultEnglish,\n  searchTemplateResultJapanese,\n  costRangeEng,\n  costRangeJap,\n  clearEng,\n  clearJp,\n  showLessEng,\n  showLessJp,\n  showMoreEng,\n  showMoreJp,\n  resultTextTemplateEng,\n  resultTextTemplateJp,\n} from '../../helpers/data_samples';\n\nimport {\n  sortDataBy,\n  rowMaker,\n  filterByStatus,\n  filterByPrice,\n  filterByName,\n  filterByCreationDate,\n  filterByCreationDatePicker\n} from '../../helpers/sample_table_helpers';\nimport { ITypeTableData } from 'scorer-ui-kit/dist/Tables';\nimport { dataContentDays, datesRange, InitialSelectedDate } from '../../helpers/datePicker_sample';\n\nexport default {\n  title: 'Filters/Organism',\n  component: 'FilterBar',\n  decorators: []\n};\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nconst TypeTableWrapper = styled.div`\nmargin: 60px 0 20px 0\n`;\n\n// const today: Date = new Date();\nconst before: Date = new Date();\nbefore.setDate(before.getDate() - 5);\n\nconst dataInitialState = sortDataBy(tableData, 'deviceName', true);\n\nconst getFilteredData = (currentSelected: IFilterResult[], data: ITableSampleData[]): ITableSampleData[] => {\n\n\n  if (Array.isArray(currentSelected) && (currentSelected.length > 0)) {\n    const filteredData: ITableSampleData[] = currentSelected.reduce((accumulator, currentFilter) => {\n      if (currentFilter.selected === null) {\n        return accumulator;\n      };\n\n      if (currentFilter.id === 'dropdownForStatus' && (isFilterItem(currentFilter.selected) || (Array.isArray(currentFilter.selected)))) {\n        return filterByStatus(accumulator, currentFilter.selected);\n      }\n\n      if ((currentFilter.id === 'priceFilter') && isFilterItem(currentFilter.selected)) {\n        return filterByPrice(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'inputForDeviceName' && isFilterItem(currentFilter.selected)) {\n        return filterByName(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'inputForDate' && isFilterItem(currentFilter.selected)) {\n        return filterByCreationDate(accumulator, currentFilter.selected);\n      }\n\n      if (currentFilter.id === 'datePickerForRuntime' && !isFilterItem(currentFilter.selected) && !Array.isArray(currentFilter.selected)) {\n        return filterByCreationDatePicker(accumulator, currentFilter.selected);\n      }\n\n      return accumulator;\n    }, data);\n\n    return filteredData;\n  }\n\n  return data;\n}\n\n/**\n * Filter Bar Story Starts\n */\nexport const _FilterBar = () => {\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n  const [data, setData] = useState<ITableSampleData[]>(dataInitialState);\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(dataInitialState));\n  const [filters, setFilters] = useState<IFilterResult[]>([]);\n\n  /**\n * Story interaction section\n */\n  const singleFilter = boolean('Single Filter', false);\n  const hasShowMore = boolean('Has Show More', true);\n  // valid formats - https://date-fns.org/v2.25.0/docs/format\n  const resultsDateFormat = text('Results date format', 'yyyy-MM-dd HH:mm');\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  const searchers: ISearchFilter[] = [\n    {\n      id: 'inputForDeviceName',\n      placeholder: language === 'english' ? 'Filter by Device Name...' : 'デバイス名前 フィルター',\n      name: language === 'english' ? 'Device Name' : 'デバイス名前',\n      // selected: {text:'OK', value: 'OK'}\n    },\n    {\n      id: 'inputForDate',\n      placeholder: language === 'english' ? 'Filter by Date' : '年月日 フィルター',\n      name: language === 'english' ? 'Date' : '年月日',\n      canHide: true,\n      showFieldText: language === 'english' ? 'Show Date Input' : '年月日 みる',\n    }\n  ]\n\n  const dropdowns: IFilterDropdownConfig[] = [\n    {\n      id: 'dropdownForStatus',\n      buttonText: language === 'english' ? 'Status' : 'ステータス',\n      list: language === 'english' ? statusValuesEng : statusValuesJp,\n      buttonIcon: 'Camera',\n      optionType: 'checkbox',\n      loadingText: language === 'english' ? 'Loading Status ...' : genericLoadingJp,\n      searchPlaceholder: language === 'english' ? 'Status...' : 'ステータス...',\n      searchResultText: language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese,\n      // selected: {text: language === 'english'? 'OK' : 'OKです。', value: 'ok' }\n    },\n    {\n      id: 'priceFilter',\n      canHide: true,\n      buttonText: language === 'english' ? 'Cost' : '価格',\n      list: language === 'english' ? costRangeEng : costRangeJap,\n      buttonIcon: 'Usage',\n      optionType: 'radio',\n      loadingText: language === 'english' ? 'Loading Cost...' : genericLoadingJp,\n      searchPlaceholder: language === 'english' ? 'Cost...' : '価格...',\n      searchResultText: language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese,\n    }\n  ]\n\n  const datePickers: IFilterDatePicker[] = [\n    {\n      id: 'datePickerForRuntime',\n      dateMode: 'interval',\n      buttonText: language === 'english' ? 'Date Range' : '日付範囲',\n      buttonIcon: 'DateTime',\n      dateTimeTextUpper: language === 'english' ? 'From' : 'から',\n      dateTimeTextLower: language === 'english' ? 'To' : 'まで',\n      timeZoneTitle: language === 'english' ? 'Timezone' : '時間帯',\n      lang: language === 'english' ? 'en' : 'ja',\n      selected: InitialSelectedDate,\n      availableRange: datesRange,\n      contentDays: dataContentDays\n    }\n  ]\n\n  /**\n   * objects only for display\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const searchersConfig = object('Search Filters', searchers);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const dropdownsConfig = object('DropdownFilters', dropdowns);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const datePickersConfig = object('DatePickers', datePickers);\n  const filtersValues = action('onChangeCallback');\n\n  const handleFilters = useCallback((currentSelected: IFilterResult[]) => {\n    filtersValues(currentSelected);\n    const localData = language === 'english' ? sortDataBy(tableData, 'deviceName', true) : sortDataBy(tableDataJp, 'deviceName', true);\n    const tempData: ITableSampleData[] = [...localData];\n\n    if ((currentSelected.length === 0)) {\n      setData(localData);\n      setFilters([])\n    } else {\n      const filteredData = getFilteredData(currentSelected, tempData);\n      setData(filteredData);\n      setFilters(currentSelected);\n    }\n\n  }, [filtersValues, language])\n\n\n  useEffect(() => {\n    const localizeData = language === 'english' ? sortDataBy(tableData, 'deviceName', true) : sortDataBy(tableDataJp, 'deviceName', true);\n    const newData = getFilteredData(filters, localizeData);\n    setData(newData);\n  }, [filters, language])\n\n  useEffect(() => {\n    setRows(rowMaker(data));\n  }, [data])\n\n  return (\n    <Container>\n      <FilterBar\n        {...{ singleFilter, hasShowMore }}\n        searchersConfig={searchers}\n        dropdownsConfig={dropdowns}\n        datePickersConfig={datePickers}\n        onChangeCallback={handleFilters}\n        totalResults={rows.length}\n        showMoreText={language === 'english' ? showMoreEng : showMoreJp}\n        showLessText={language === 'english' ? showLessEng : showLessJp}\n        filtersTitle={language === 'english' ? 'Filters' : 'フィルター'}\n        resultTextTemplate={language === 'english' ? resultTextTemplateEng : resultTextTemplateJp}\n        clearText={language === 'english' ? clearEng : clearJp}\n        resultsDateFormat={resultsDateFormat}\n      />\n      <TypeTableWrapper>\n        <TypeTable {...{ selectCallback, toggleAllCallback, rows, sortCallback, }}\n          columnConfig={language === 'english' ? columnConfigSample : columnConfigSampleJp}\n          hasStatus\n          selectable\n          hasThumbnail\n          hasTypeIcon\n          defaultAscending\n          hasHeaderGroups\n        />\n      </TypeTableWrapper>\n    </Container>)\n}","import { action } from \"@storybook/addon-actions\";\nimport { boolean, select } from \"@storybook/addon-knobs\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { ISplitButtonProps, ModalProvider, SplitButton, useModal } from 'scorer-ui-kit';\nimport styled from \"styled-components\";\n\nexport default {\n  title: 'Form/Buttons',\n  component: SplitButton,\n  decorators: []\n};\n\nconst Container = styled.div`\n`;\n\nconst customComponentExample : ReactElement = <h1>Main Action Modal</h1>;\n\nconst SplitExampleWithModal = (props : ISplitButtonProps) => {\n\n  const [splitButtonProps, setSplitButtonProps] = useState(props);\n  const { createModal } = useModal();\n\n  const buttonClickA0 = action('Main pressed, modal opened');\n  const buttonClickA1 = action('日本語の場合はランダム pressed');\n  const buttonClickA2 = action('Save Action pressed');\n  const buttonClickA3 = action('Download pressed');\n\n  const openImageModal = () => {\n    createModal({ customComponent: customComponentExample, padding: true, width: 'auto'})\n    buttonClickA0();\n  }\n\n  const buttonList = [\n    {id: 'a0', text: 'Main Action Open Modal', icon: 'Success',  onClickCallback: openImageModal },\n    {id: 'a1', text: '日本語の場合はランダム', onClickCallback:  buttonClickA1 },\n    {id: 'a2', text: 'Save Action', icon: 'Analyse', hasOnSelectLoading:true , onClickCallback: buttonClickA2 },\n    {id: 'a3', text: 'Download Action', icon: 'Download', onClickCallback: buttonClickA3, disabled:true  },\n  ]\n\n  useEffect(() => {\n    setSplitButtonProps(props);\n  }, [props])\n\n  return (\n    <Container>\n      <SplitButton\n        {...splitButtonProps}\n        buttonList={buttonList}\n      />\n    </Container>\n  )\n}\n\nexport const _SplitButton = () => {\n\n  const buttonDesign = select(\"Design\", { Primary: \"primary\", Secondary: \"secondary\", Danger: \"danger\", Custom: \"custom\" }, \"primary\");\n  const buttonDisabled = boolean(\"Disabled\", false);\n  const buttonSize = select(\"Size\", { Small: \"small\", Normal: \"normal\", Large: \"large\" }, \"normal\");\n\n  return (\n    <ModalProvider>\n      <SplitExampleWithModal\n        mainButtonId={\"a0\"}\n        design={buttonDesign}\n        size={buttonSize}\n        disabled={buttonDisabled}\n        buttonList={[]} // this is replaced with data in the SplitExample component\n      />\n    </ModalProvider>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { AreaUploadManager, PageHeader } from 'scorer-ui-kit';\nimport { text, object, boolean } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\nexport default {\n  title: 'Form/File Management',\n  component: AreaUploadManager,\n  decorators: []\n};\n\nconst Container = styled.div`\n  margin: 20px\n`;\n\nconst defaultIcons: string[] = ['MonitoringProfile', 'RetryJob']\n\nconst fileTypes = ['image/jpeg', 'image/png', 'text/csv'];\nexport const _AreaUploadManager = () => {\n\n  const showCustomComponent = boolean('Show Custom Component', false);\n  const title = text('Title', 'Select Files')\n  const selectFilesText = text('Select Files Text', 'Select Files');\n  const description = text('Description', 'To begin, drop your CSV and Images files here to continue or click Select Files below.');\n  const addMoreFilesText = text('Add More Files Text', 'Add More files')\n  const fileIcons = object('File Icons', defaultIcons)\n  const showValue = action('Input Callback');\n  const clearedFilesText = text('Message', 'Cleared all selected files');\n  const onClearFilesBtnClick = action('Action was clicked');\n  const allowedFileTypes = object('Allowed File Types', fileTypes);\n  const beginUploadMsg = action('Begin Upload Button Click');\n\n  const inputCallback = (goodFiles: FileList, rejectedFiles: FileList) => {\n    console.log('good Files', goodFiles);\n    console.log('rejected', rejectedFiles);\n    showValue({ goodFiles, rejectedFiles });\n  };\n\n  const clearFilesInputCallback = () => {\n    onClearFilesBtnClick(clearedFilesText);\n  }\n\n  return (\n    <Container>\n      <AreaUploadManager\n        {...{ selectFilesText, title, fileIcons, description, allowedFileTypes, addMoreFilesText }}\n        onChangeCallback={inputCallback}\n        clearFilesCallback={clearFilesInputCallback}\n        beginUploadCallback={beginUploadMsg}\n        customComponent={showCustomComponent\n          ? <PageHeader\n            title=\"CustomComponent Example\"\n            introductionText=\"This is a page header component that was sent as an example of a custom component. Select multiple files\"\n          />\n          : undefined}\n      />\n    </Container>\n  )\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { CropTool } from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\nimport { text, boolean, number } from \"@storybook/addon-knobs\";\nimport photo from '../../assets/placeholder.jpg';\n\nconst Container = styled.div`\n    margin: 20px;\n`;\n\nconst CropResult = styled.img`\n`;\n\nconst NewImageArea = styled.div``;\n\nexport default {\n  title: 'Form/File Management',\n  component: CropTool,\n  decorators: [],\n  escapeHTML: false,\n};\n\nexport const _CropTool = () => {\n  const isResizable = boolean('Is Resizable', true);\n  const [cropImg, setCropImg] = useState('');\n  const [isCropping, setIsCropping] = useState(true);\n  const title = text('Title', 'Crop Image');\n  const cancelBtnTxt = text('Cancel Button Text', 'Cancel');\n  const cropBtnTxt = text('Crop Button Text', `Crop and Save`);\n  const canvasHeight = number('Canvas Height', 400);\n  const canvasWidth = number('Canvas Width', 450);\n  const cropHeight = number('Crop Height', 300);\n  const cropWidth = number('Crop Width', 300);\n  const aspectRatio = number('Aspect Ratio', 0);\n  const errorValue = action('Error');\n\n  const onCrop = (newImgUrl: string) => {\n    setCropImg(newImgUrl);\n    setIsCropping(false);\n  };\n\n  const onClose = () => {\n    setIsCropping(false);\n  }\n  const onError = (msg: string) => {\n    console.log(msg);\n    errorValue(msg);\n  };\n\n  return (\n    <Container>\n      {isCropping ? <CropTool // this key is to force the re-render in storybook\n        key={`${isResizable} - ${canvasHeight} - ${canvasWidth} - ${cropHeight} - ${cropWidth} - ${aspectRatio}`}\n        imgUrl={photo}\n        {...{\n          title,\n          onCrop,\n          onClose,\n          cancelBtnTxt,\n          cropBtnTxt,\n          isResizable,\n          canvasHeight,\n          canvasWidth,\n          cropHeight,\n          cropWidth,\n          onError,\n          aspectRatio,\n        }}\n      />\n        : null}\n      <NewImageArea>\n        <h3>Cropped Area</h3>\n        <CropResult src={cropImg} />\n      </NewImageArea>\n    </Container>\n  )\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {DropArea} from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\nimport { text} from \"@storybook/addon-knobs\";\n\nconst Container = styled.div`\n  max-width: 500px;\n`;\n\nexport default {\n  title: 'Form/File Management',\n  component: DropArea,\n  decorators:[]\n};\n\nexport const _DropArea = () => {\n\n  const textVal = text('Text','Drop a file');\n  const heightVal = text('Height', '300px');\n  const showValue = action('Input Callback');\n  \n\n  const myCallback = (newFiles: FileList) => {\n    console.log('file', newFiles);\n    if(newFiles.length === 1) {\n      showValue(newFiles[0].name);\n    } else {\n      showValue(newFiles);\n    }\n    \n  };\n\n  return(\n    <Container>\n      <DropArea\n        height={heightVal}\n        text={textVal}\n        dropCallback={myCallback}\n      />\n    </Container>\n  )\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {InputFileButton} from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\nimport { boolean, select, text} from \"@storybook/addon-knobs\";\n\nconst Container = styled.div`\n    margin: 20px;\n`;\n\nexport default {\n  title: 'Form/File Management',\n  component: InputFileButton,\n  decorators:[]\n};\n\nexport const _InputFileButton = () => {\n\n  const multiple = boolean('Multiple', false);\n  const textVal = text('Text','Select a File');\n  const buttonDesign = select(\"Button Design\", { Primary: \"primary\", Secondary: \"secondary\", Danger: \"danger\" }, \"primary\");\n  const buttonSize = select(\"Button Size\", { Small: \"small\", Normal: \"normal\", Large: \"large\" }, \"normal\");\n\n  const showValue = action('Input Callback');\n\n\n  const inputCallback = (newFiles: FileList) => {\n    console.log('file', newFiles);\n    if(newFiles.length === 1) {\n      showValue(newFiles[0].name);\n    } else {\n      showValue(newFiles);\n    }\n  };\n\n  return(\n    <Container>\n      <InputFileButton\n        text={textVal}\n        {...{buttonDesign, buttonSize, multiple, inputCallback}}\n\n        />\n    </Container>\n  )\n};","import React, { useState } from 'react';\n// import { action } from '@storybook/addon-actions';\nimport { boolean, number, object, text, select } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport styled from 'styled-components';\nimport { DurationSlider, ISliderMark, PageHeader, ITimeUnit } from 'scorer-ui-kit';\n\n\nexport default {\n  title: 'Form/Input',\n  component: DurationSlider,\n  decorators: []\n};\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst Wrapper = styled.div`\n  margin: 20px;\n  width: 280px;\n`;\n\nconst exampleMarks: ISliderMark[] = [\n  {\n    value: 1,\n    label: '1H',\n  },\n  {\n    value: 2,\n    label: '2H',\n  },\n  {\n    value: 3,\n    label: '3H',\n  },\n  {\n    value: 4,\n    label: '4H',\n  },\n  {\n    value: 5,\n    label: '5H',\n  },\n  {\n    value: 6,\n    label: '6H',\n  },\n  {\n    value: 7,\n    label: '7H',\n  },\n  {\n    value: 8,\n    label: '8H',\n  },\n];\n\nconst exampleMarks2: ISliderMark[] = [\n  {\n    value: 3,\n    label: '3s',\n  },\n  {\n    value: 360,\n    label: '',\n  },\n  {\n    value: 720,\n    label: '',\n  },\n  {\n    value: 1080,\n    label: '',\n  },\n  {\n    value: 1440,\n    label: '',\n  },\n  {\n    value: 1800,\n    label: '',\n  },\n  {\n    value: 2160,\n    label: '',\n  },\n  {\n    value: 2520,\n    label: '',\n  },\n  {\n    value: 2880,\n    label: '',\n  },\n  {\n    value: 3240,\n    label: '',\n  },\n  {\n    value: 3600,\n    label: '1h',\n  },\n];\nconst defaultMixValue = 1800;\n\ninterface ITimeValue {\n  time: number\n  unit: ITimeUnit\n}\n\nconst secToMinAndHours = (seconds: number): ITimeValue => {\n\n  if (seconds >= 3600) {\n    return {\n      time: Math.round(seconds / 3600),\n      unit: 'hours'\n    }\n  }\n\n  if (seconds >= 60) {\n    return {\n      time: Math.round(seconds / 60),\n      unit: 'minutes'\n    }\n  }\n\n  return {\n    time: seconds,\n    unit: 'seconds'\n  }\n}\n\nexport const _DurationSlider = () => {\n\n  const title = text('Title', 'Duration');\n  const durationUnit = select(\"Time Unit\", { Seconds: 'seconds', Minutes: 'minutes', Hours: 'hours' }, 'hours');\n  const disabled = boolean('Disabled', false);\n  const maxValue = number('Max', 8);\n  const minValue = number('Min', 1);\n  const defaultValue = number('Default value', 6)\n\n  const showValue = action('Input Callback');\n  const marks = object('Marks', exampleMarks);\n  // const step = number('Step', 1); // still fixing step option\n  const handleUpdate = (value: number) => {\n    console.log('updated value', value);\n    showValue(`Returned value: ${value}`, value)\n  };\n\n  const [value2, setValue2] = useState<ITimeValue>({time: 30, unit: 'minutes'});\n\n  const title2 = text('Title 2', 'Time');\n  const disabled2 = boolean('Disabled 2', false);\n  const maxValue2 = number('Max 2', 3600);\n  const minValue2 = number('Min 2', 3);\n  const defaultValue2 = number('Default value 2', defaultMixValue)\n  const onlyMarkSelect = boolean('Only Mark Select', true);\n\n  const showValue2 = action('Input Callback');\n  const marks2 = object('Marks 2', exampleMarks2);\n  // const step = number('Step', 1); // still fixing step option\n  const handleUpdate2 = (value: number) => {\n    console.log('updated value2', value);\n    showValue2(`Returned value2: ${value}`, value)\n    const newValue = secToMinAndHours(value)\n    setValue2(newValue);\n  };\n\n  return (\n    <Container>\n      <Wrapper>\n        <PageHeader\n          title='Simple example'\n          introductionText='Values are controlled by component'\n        />\n        <DurationSlider\n          max={maxValue}\n          min={minValue}\n          disabled={disabled}\n          // step={step}\n          inputCallback={handleUpdate}\n          marks={marks}\n          defaultValue={defaultValue}\n          title={title}\n          timeUnit={durationUnit}\n        />\n      </Wrapper>\n      <Wrapper>\n        <PageHeader\n          title='Mixed values example'\n          introductionText='Values are controlled from outside'\n        />\n        <DurationSlider\n          max={maxValue2}\n          min={minValue2}\n          disabled={disabled2}\n          // step={step}\n          inputCallback={handleUpdate2}\n          marks={marks2}\n          defaultValue={defaultValue2}\n          controlledValue={value2.time}\n          title={title2}\n          timeUnit={value2.unit}\n          onlyMarkSelect={onlyMarkSelect}\n        />\n      </Wrapper>\n    </Container>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean } from \"@storybook/addon-knobs\";\nimport {TextField} from 'scorer-ui-kit';\n\nconst Container = styled.div`\n    margin: 20px;\n`;\n\nexport default {\n  title: 'Form/Input',\n  component: TextField,\n  decorators: []\n};\n\nexport const TextInput = () => {\n\n  const inputName = text(\"Input Name\", \"my_input\");\n  const inputLabel = text(\"Label\", \"My Input\");\n  const showFeedback = boolean(\"Show Feedback\", false);\n  const inputFeedback = text(\"Input Feedback\", \"This is a feedback message.\");\n  const inputPlaceholder = text(\"Placeholder\", \"Placeholder...\");\n  const inputState = select(\"State\", { Default: \"default\",  Disabled: 'disabled', Required: 'required',  Valid: 'valid',  Invalid: 'invalid', Processing: 'processing' }, \"default\");\n  const fieldRequired = boolean(\"Required\", false);\n\n  return <Container>\n    <TextField \n      id={inputName} \n      name={inputName} \n      label={inputLabel} \n      placeholder={inputPlaceholder} \n      fieldState={inputState} \n      showFeedback={showFeedback}\n      feedbackMessage={inputFeedback} \n      required={fieldRequired} />\n    </Container>;\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean } from \"@storybook/addon-knobs\";\nimport {PasswordField} from 'scorer-ui-kit';\n\nconst Container = styled.div`\n    margin: 20px;\n`;\n\nexport default {\n  title: 'Form/Input',\n  component: PasswordField,\n  decorators: []\n};\n\nexport const PasswordInput = () => {\n\n  const inputName = text(\"Input Name\", \"my_input\");\n  const inputLabel = text(\"Label\", \"My Input\");\n  const inputValue = text(\"Value\", \"Test\");\n  const inputPlaceholder = text(\"Placeholder\", \"Placeholder...\");\n  const fieldRequired = boolean(\"Required\", false);\n  const showFeedback = boolean(\"Show Feedback\", false);\n  const inputFeedback = text(\"Feedback\", \"This is a feedback message.\");\n  const inputState = select(\"State\", { Default: \"default\",  Disabled: 'disabled', Required: 'required',  Valid: 'valid',  Invalid: 'invalid', Processing: 'processing' }, \"default\");\n\n  return <Container>\n    <PasswordField \n      name={inputName} \n      label={inputLabel} \n      defaultValue={inputValue} \n      placeholder={inputPlaceholder} \n      fieldState={inputState} \n      showFeedback={showFeedback}\n      feedbackMessage={inputFeedback}\n      required={fieldRequired} />\n  </Container>;\n\n};","import React from 'react';\n// import { action } from '@storybook/addon-actions';\nimport { boolean, number, object, text} from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport styled from 'styled-components';\nimport {PercentageSlider, ISliderMark, IFeedbackColor} from 'scorer-ui-kit';\n\n\nexport default {\n  title: 'Form/Input',\n  component: PercentageSlider,\n  decorators: []\n};\n\nconst Container = styled.div`\n    margin: 20px;\n    width: 268px;\n`;\n\nconst exampleMarks : ISliderMark[] = [\n  {\n    value: 0,\n    label: '0%',\n  },\n  {\n    value: 20,\n  },\n  {\n    value: 40,\n  },\n  {\n    value: 60,\n  },\n  {\n    value: 80,\n  },\n  {\n    value: 100,\n    label:'100%',\n  },\n];\n\nexport const _PercentageSlider = () => {\n  const title = text('Title', 'Duration');\n  const disabled = boolean('Disabled', false);\n  const defaultValue = number('Default value', 30);\n  const customThumb = boolean(\"Custom colors function\",false);\n  const customTitle = boolean(\"Custom Title function\",false);\n  const showValue = action('Input Callback');\n  const marks = object('Marks', exampleMarks);\n  const showTitle = boolean(\"Show Value\", true);\n  const allMarkCentered = boolean('Center all mark values', false);\n\n  // const step = number('Step', 1); // still fixing step option\n  const handleUpdate = (value: number) => {\n    console.log('updated value', value);\n    showValue(`Returned value: ${value}`, value)\n  };\n\n  const otherColorHandler = (value: number)  : IFeedbackColor =>{\n    if(value <= 20) {\n      return 'neutral';\n    }\n\n    if((value > 20) && (value <= 80)) {\n      return 'info';\n    }\n\n    return 'error';\n  }\n\n  const otherTitlesHandler = (value: number) : string => {\n    if(value <= 20) {\n      return 'Small sound';\n    }\n\n    if((value > 20) && (value <= 80)) {\n      return 'Normal sound';\n    }\n\n    return 'Dangerous sound';\n  }\n\n  return (\n    <Container>\n      <PercentageSlider\n          disabled={disabled}\n          // step={step}\n          inputCallback={handleUpdate}\n          marks={marks}\n          defaultValue={defaultValue}\n          title={title}\n          updateThumbColor={customThumb ? otherColorHandler : undefined }\n          updateTitle={customTitle ? otherTitlesHandler : undefined}\n          showValue={showTitle}\n          allMarkCentered={allMarkCentered}\n        />\n    </Container>\n  )\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { action } from '@storybook/addon-actions';\nimport { boolean, text } from \"@storybook/addon-knobs\";\nimport { RadioButton, Label } from 'scorer-ui-kit';\n\nexport default {\n  title: 'Form/Input',\n  component: RadioButton,\n  decorators: []\n};\n\nconst Container = styled.div``;\nconst OptionsWrapper = styled.div`\n  margin: 20px 0;\n`;\n\nexport const _RadioButton = () => {\n\n  const disabled = boolean(\"Disabled\", false);\n  const selection = action('value-changed');\n  const name = text('Name', 'Example');\n\n  const [currentChecked, setCurrentCheck] = useState<string | number>();\n\n  const handleChange = (value: string | number) => {\n    selection(value)\n    setCurrentCheck(value);\n  }\n\n  return (\n    <Container>\n      <OptionsWrapper>\n        <Label htmlFor={'option1'} labelText={'Option 1'} direction='row-reverse'>\n          <RadioButton {...{ name, disabled, currentChecked }} id={'option1'} value='option1' onChangeCallback={handleChange} />\n        </Label>\n      </OptionsWrapper>\n      <OptionsWrapper>\n        <Label htmlFor={'option2'} labelText={'Option 2'} direction='row-reverse'>\n          <RadioButton {...{ name, disabled, currentChecked }} id={'option2'} value='option2' onChangeCallback={handleChange} />\n        </Label>\n      </OptionsWrapper>\n      <OptionsWrapper>\n        <Label htmlFor={'option3'} labelText={'Option 3'} direction='row-reverse'>\n          <RadioButton {...{ name, disabled, currentChecked }} id={'option3'} value='option3' onChangeCallback={handleChange} />\n        </Label>\n      </OptionsWrapper>\n    </Container>)\n\n}","import React from 'react';\n// import { action } from '@storybook/addon-actions';\nimport { boolean, number, object } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport styled from 'styled-components';\nimport {SliderInput, ISliderMark} from 'scorer-ui-kit';\n\n\nexport default {\n  title: 'Form/Input',\n  component: SliderInput,\n  decorators: []\n};\n\nconst Container = styled.div`\n    margin: 20px;\n    width: 268px;\n`;\n\nconst exampleMarks : ISliderMark[] = [\n  {\n    value: 1,\n    label: '1H',\n  },\n  {\n    value: 2,\n    label: '2H',\n  },\n  {\n    value: 3,\n    label: '3H',\n  },\n  {\n    value: 4,\n    label: '4H',\n  },\n  {\n    value: 5,\n    label:'5H',\n  },\n  {\n    value: 6,\n    label:'6H',\n  },\n  {\n    value: 7,\n    label:'7H',\n  },\n  {\n    value: 8,\n    label:'8H',\n  },\n];\n\n\nexport const _SliderInput = () => {\n  const disabled = boolean('Disabled', false);\n  const maxValue = number('Max', 8);\n  const minValue = number('Min', 1);\n  const defaultValue = number('Default value', 6)\n  const showValue = action('Input Callback');\n  const marks = object('Marks', exampleMarks);\n  const allMarkCentered = boolean('Center aligned end numbers', false);\n  // const step = number('Step', 1); // still fixing step option\n\n  const handleUpdate = (value: number) => {\n    console.log('updated value', value);\n    showValue(`Returned value: ${value}`, value)\n  };\n\n  return (\n    <Container>\n      <SliderInput\n          max={maxValue}\n          min={minValue}\n          disabled={disabled}\n          // step={step}\n          inputCallback={handleUpdate}\n          marks={marks}\n          defaultValue={defaultValue}\n          allMarkCentered={allMarkCentered}\n        />\n    </Container>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean } from \"@storybook/addon-knobs\";\nimport {SmallInput} from 'scorer-ui-kit';\n\nexport default {\n  title: 'Form/Input',\n  component: SmallInput,\n  decorators: []\n};\n\nconst Container = styled.div`\n    margin: 100px;\n    max-width: 200px;\n`;\n\nexport const _SmallInput = () => {\n\n  const inputType = select(\"Type\", { Text: \"text\", Password: \"password\", Email: \"email\", Number: \"number\" }, \"text\");\n  const inputName = text(\"Input Name\", \"my_input\");\n  const inputLabel = text(\"Label\", \"My Input\");\n  const inputUnit = text(\"Unit\", \"º\");\n  const inputPlaceholder = text(\"Placeholder\", \"Placeholder...\");\n  const fieldRequired = boolean(\"Required\", false);\n  const inputState = select(\"State\", { Default: \"default\",  Disabled: 'disabled', Required: 'required',  Valid: 'valid',  Invalid: 'invalid', Processing: 'processing' }, \"default\");\n\n  return <Container>\n    <SmallInput\n      id = {inputName}\n      type={inputType}\n      unit={inputUnit}\n      name={inputName}\n      label={inputLabel}\n      placeholder={inputPlaceholder}\n      fieldState={inputState}\n      required={fieldRequired}\n      disabled={inputState === 'disabled'}\n    />\n  </Container>;\n\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean } from \"@storybook/addon-knobs\";\nimport { TextAreaField } from 'scorer-ui-kit';\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nexport default {\n  title: 'Form/Input',\n  component: TextAreaField,\n  decorators: []\n};\n\n\nexport const _TextAreaField = () => {\n  const fieldName = text(\"Textarea Name\", \"example_texarea\");\n  const fieldLabel = text(\"Label\", \"Textarea Example\");\n  const showFeedback = boolean(\"Show Feedback\", false);\n  const fieldFeedback = text(\"Feedback\", \"This is a feedback message.\");\n  const fieldPlaceholder = text(\"Placeholder\", \"Placeholder...\");\n  const fieldRequired = boolean(\"Required\", false);\n  const currentState = select(\"State\",\n    { Default: \"default\",\n      Disabled: 'disabled',\n      Required: 'required',\n      Valid: 'valid',\n      Invalid: 'invalid',\n      Processing: 'processing'\n    }, \"default\");\n\n    return <Container>\n      <TextAreaField\n        id={fieldName}\n        name={fieldName}\n        label={fieldLabel}\n        placeholder={fieldPlaceholder}\n        showFeedback={showFeedback}\n        feedbackMessage={fieldFeedback}\n        fieldState={currentState}\n        required={fieldRequired}\n      ></TextAreaField>\n    </Container>\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { text, select, object, boolean } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport { SelectField, SelectWrapper} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\nexport default {\n  title: 'Form/atoms',\n  component: SelectField,\n  decorators: []\n};\n\nconst Container = styled.div`\n  margin: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst FixedSelect = styled.div<{ width?: string }>`\n  ${SelectWrapper} {\n    width: ${({ width }) => width ? width : `60px`};\n  }\n`;\n\nconst Subsection = styled.div`\n  flex: 1;\n`;\n\nconst Title = styled.h1`\n  font-family: var(--font-title);\n  font-size: 24px;\n  color: var(--grey-12);\n  font-weight: 500;\n`;\n\nexport const _SelectField = () => {\n  const iconList = generateIconList();\n  \n  const isCompact = boolean('isCompact', false);\n  const disabled = boolean('Disabled', false);\n  const fieldState = select(\"State\", { Default: \"default\",  Disabled: 'disabled', Required: 'required',  Valid: 'valid',  Invalid: 'invalid', Processing: 'processing' }, \"default\");\n  const placeholder = text('Placeholder (Free Width)', 'Choose an option...');\n  const defaultValue = text('Default Value (Free Width)', '');\n  const freeSelectValue = action('Free select value');\n  const fixedSelectValue = action('Free select value');\n  const icon = select(\"Icon\", iconList, Object.keys(iconList)[0]);\n\n  const selectWidth = text('Fix width', '80px');\n  const label = object('Free Select Label', {\n    htmlFor: 'free_select',\n    text: 'Field Label'\n  })\n\n  const fixLabel = object('Fix Select Label', {\n    htmlFor: 'fix_select',\n    text: 'Page',\n    isSameRow: true\n  })\n\n  const freeOnChange = (value: string) => {\n    freeSelectValue(value);\n  }\n\n  const fixSelectOnChange = (value: string) => {\n    fixedSelectValue(value);\n  }\n  \n  return (\n    <Container>\n      <Subsection>\n        <Title>Select (Free Width)</Title>\n        <SelectField\n          {...{\n            isCompact,\n            placeholder,\n            label,\n            selectWidth,\n            disabled,\n            defaultValue,\n            fieldState\n          }}\n          changeCallback={freeOnChange}\n        >\n          <option value=\"option1\">Example Option 1</option>\n          <option value=\"option2\">Example Option 2</option>\n          <option value=\"option3\">Example Option 3</option>\n          <option value=\"option4\">Example Option 4</option>\n        </SelectField>\n      </Subsection>\n          \n      <Subsection>\n        <Title>Select (Fixed Width)</Title>\n        <FixedSelect width={selectWidth}>\n          <SelectField\n            {...{ isCompact, disabled, fieldState }}\n            label={fixLabel}\n            defaultValue={1}\n            changeCallback={fixSelectOnChange}\n            >\n            <option value={1}>1</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={15}>15</option>\n            <option value={20}>20</option>\n          </SelectField>\n        </FixedSelect>\n      </Subsection>\n        \n      <Subsection>\n        <Title>Select (With Icon)</Title>\n        <SelectField\n          {...{\n            isCompact,\n            placeholder,\n            label,\n            selectWidth,\n            disabled,\n            defaultValue,\n            fieldState,\n            icon\n          }}\n          changeCallback={freeOnChange}\n          >\n          <option value=\"option1\">Example Option 1</option>\n          <option value=\"option2\">Example Option 2</option>\n          <option value=\"option3\">Example Option 3</option>\n          <option value=\"option4\">Example Option 4</option>\n        </SelectField>\n      </Subsection>\n    </Container>\n  );\n}","import React, { ReactElement } from 'react';\nimport {\n  GlobalUI,\n  PageHeader,\n  TextAreaField,\n  INotificationItem,\n  INotificationsHistory,\n  ICustomDrawer,\n  TypeTable,\n  TabList,\n  Tab,\n  useThemeToggle,\n  ContentLayout,\n  IHeaderContent,\n  ButtonsStack,\n  IButtonStack\n} from 'scorer-ui-kit';\nimport photo from '../assets/placeholder.jpg';\n\nimport {\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\n\nimport styled from 'styled-components';\nimport { Route, Switch, RouteComponentProps } from 'react-router-dom';\n\nimport logoMarkSvg from '../assets/logo-mark.svg';\nimport logoTextSvg from '../assets/logo-text.svg';\n\nimport { text, object, boolean, select } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\n\nexport default {\n  title: 'Global',\n  component: GlobalUI,\n  parameters: {\n    layout: 'fullscreen',\n  },\n  decorators: [\n  ]\n};\n\nconst Container = styled.div`\n  flex: 1;\n`;\n\nconst ExampleContentBlock = styled.div`\n  h2 {\n    font-family: var(--font-ui);\n    font-weight: 500;\n    color: var(--grey-11);\n    font-size: 24px;\n  }\n  p {\n    font-family: var(--font-ui);\n    color: var(--grey-11);\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 20px; /* 142.857% */\n  }\n`\n\nconst buttonList : IButtonStack[] = [\n  {id:'primaryBase0', buttonType: 'default', text:'Example Action 1'},\n  {id:'secondaryBase1', buttonType: 'default', text:'Example Action 2', design: 'secondary'},\n]\n\nconst ExampleContent : IHeaderContent = {\n  UtilityHeaderOptions: {\n    back: { label: \"Back\", link: \"/\" },\n    breadcrumbs: [{text:'Examples', href:'/'},{text:'Two', href:'#2'},{text:'Three', href:'#3'},{text:'Four', href:'#4'},{text:'Five', href:'#5'}],\n    showBreadcrumbs: true,\n    share: { show: true, label: \"Share\", link: \"https://www.example.com\", copiedLabel: \"Copied\" }\n  },\n  PageHeaderArea: <PageHeader\n    title='Welcome'\n    introductionText='Thanks for using the SCORER UI Kit. Dolor ex Lorem aliqua ad deserunt ullamco culpa sunt occaecat reprehenderit adipisicing. Amet incididunt do aliquip elit exercitation proident dolor excepteur do. Dolore veniam incididunt labore cupidatat Lorem. '\n    icon=\"Home\"\n    rightContent={<ButtonsStack buttons={buttonList}/>}\n  />,\n  TabsElementArea:\n    <TabList defaultTabId='tab1'>\n      <Tab tabFor='tab1'>Home</Tab>\n      <Tab tabFor='tab2'>Example One</Tab>\n      <Tab tabFor='tab3'>Example Two</Tab>\n    </TabList>\n\n}\n\nconst Welcome = () => (\n  <>\n    <ExampleContentBlock>\n      <h2>What is Lorem Ipsum?</h2>\n      <p>Cupidatat nisi laboris voluptate sint culpa sunt esse sint. Minim do commodo elit labore elit sunt do. Fugiat Lorem sunt anim voluptate do ex eu ea. Exercitation fugiat cillum aliquip consectetur enim aliquip cillum officia voluptate cupidatat do nisi ad pariatur. Enim magna sunt elit aliqua reprehenderit.</p>\n    </ExampleContentBlock>\n\n    <ExampleContentBlock>\n      <h2>Why do we use it?</h2>\n      <p>Sunt exercitation mollit tempor minim est ex et officia. Duis ea tempor labore qui qui irure est ex nisi eiusmod dolore. Anim laboris sit mollit nisi nostrud tempor sunt mollit. Reprehenderit est consequat mollit adipisicing occaecat dolore incididunt. Ut quis veniam proident fugiat adipisicing consequat duis ut tempor nostrud. Nulla sint voluptate do. Eiusmod nisi elit fugiat occaecat elit culpa est qui.</p>\n    </ExampleContentBlock>\n\n    <ExampleContentBlock>\n      <h2>Where does it come from?</h2>\n      <p>Est cupidatat dolor cupidatat ullamco et esse qui exercitation laborum Lorem labore. Nostrud irure anim magna ut est dolor laborum ipsum aliqua excepteur enim reprehenderit et id laboris. Veniam ut esse velit aliquip pariatur qui et in irure incididunt velit. Incididunt voluptate laborum esse minim.</p>\n    </ExampleContentBlock>\n\n    <ExampleContentBlock>\n      <h2>Where can I get some?</h2>\n      <p>Elit magna minim culpa cupidatat laborum aliquip ea. Incididunt exercitation irure voluptate sit aliquip et tempor. Magna cillum veniam velit id ad anim commodo. Laborum minim laboris voluptate cillum aliquip excepteur quis reprehenderit sint veniam. Sunt proident non ex laborum duis commodo. Ut ad amet dolor nulla nulla est aliquip nostrud deserunt. Sit laborum tempor incididunt irure duis mollit.</p>\n    </ExampleContentBlock>\n\n    <ExampleContentBlock>\n      <h2>Example</h2>\n      <p>Do aliqua non id anim ut ea sit aute exercitation laboris occaecat tempor. Aliqua quis ipsum id veniam aliquip do culpa enim ullamco enim aute veniam. Reprehenderit pariatur cupidatat enim laborum. Dolore pariatur sint eu excepteur do veniam consectetur deserunt ea incididunt qui ea cupidatat nulla consequat.</p>\n    </ExampleContentBlock>\n  </>\n);\n\nconst About = () => (\n  <ExampleContentBlock>\n    <h2>About</h2>\n    <p>Do aliqua non id anim ut ea sit aute exercitation laboris occaecat tempor. Aliqua quis ipsum id veniam aliquip do culpa enim ullamco enim aute veniam. Reprehenderit pariatur cupidatat enim laborum. Dolore pariatur sint eu excepteur do veniam consectetur deserunt ea incididunt qui ea cupidatat nulla consequat.</p>\n  </ExampleContentBlock>\n);\n\nconst Team = () => (\n  <ExampleContentBlock>\n    <h2>Team</h2>\n    <p>Do aliqua non id anim ut ea sit aute exercitation laboris occaecat tempor. Aliqua quis ipsum id veniam aliquip do culpa enim ullamco enim aute veniam. Reprehenderit pariatur cupidatat enim laborum. Dolore pariatur sint eu excepteur do veniam consectetur deserunt ea incididunt qui ea cupidatat nulla consequat.</p>\n  </ExampleContentBlock>\n);\n\n\nconst Contact = () => (\n  <div>\n    <ExampleContentBlock>\n      <h2>Contact</h2>\n      <p>Please leave us a message...</p>\n    </ExampleContentBlock>\n    <TextAreaField name='message' label='message' fieldState='default' />\n  </div>\n);\n\nconst Company = () => (\n  <ExampleContentBlock>\n    <h2>Example</h2>\n    <p>We are a team dedicated to create components to make building UI easier.</p>\n  </ExampleContentBlock>\n);\n\nconst Accounts = () => (\n  <ExampleContentBlock>\n    <h2>Example</h2>\n    <p>Here is a list of accounts</p>\n  </ExampleContentBlock>  \n);\n\nconst Billing = () => (\n  <ExampleContentBlock>\n    <h2>Example</h2>\n    <p>Information about your billing</p>\n  </ExampleContentBlock>\n);\n\nconst Payments = () => (\n  <ExampleContentBlock>\n    <h2>Example</h2>\n    <p>Information of Payments</p>\n  </ExampleContentBlock>\n);\n\ninterface OwnProps {\n  match: {\n    params: {\n      name: string\n    }\n  }\n}\n\ntype RouteProps = OwnProps & RouteComponentProps;\n\nconst Service = (route: RouteProps) => (\n  <PageHeader\n    title={`Service ${route.match.params.name}`}\n    introductionText='Excelling at this service.'\n  />\n)\n\nconst Support = () => (\n  <PageHeader\n    title={`Support`}\n    introductionText='Call 00000000'\n  />\n)\n\nconst columnConfig: ITableColumnConfig[] = [\n  {\n    header: 'Start time',\n    groupTitle: 'Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Job Created At',\n    groupTitle: 'Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Run Time',\n    groupTitle: 'Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Status',\n    groupTitle: 'Meta',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Details',\n    groupTitle: 'Meta',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n];\n\nconst rows: ITypeTableData = [\n  {\n    id: 'row1',\n    header: {\n      image: photo,\n    },\n    columns: [\n      { text: `2020/06/11 - 16:00` },\n      { customComponent: <div style={{ fontStyle: 'italic' }}>Just Now</div> },\n      { text: `00:00:12` },\n      { text: `Complete` },\n      { text: `Green` },\n    ]\n  },\n  {\n    id: 'row2',\n    header: {\n      image: photo,\n    },\n    columns: [\n      { text: '2020/06/11 - 13:00' },\n      { text: `2020/06/11 - 17:30` },\n      { text: `00:00:12` },\n      { text: `Complete` },\n      { text: `Black` },\n    ]\n  },\n  {\n    id: 'row3',\n    header: {\n      image: photo,\n    },\n    columns: [\n      { text: `2020/05/10 - 05:30` },\n      { text: `2020/05/10 - 12:30` },\n      { text: `00:00:12` },\n      { text: `Complete` },\n      { text: `Pink` },\n    ]\n  }\n];\n\nconst TablePage = () => (\n  <>\n    <PageHeader\n      title='Table Example'\n      introductionText='This is an example to verify that the sidebar with table'\n    />\n    <TypeTable\n      {...{\n        columnConfig,\n        rows,\n        selectable: true,\n        hasThumbnail: true,\n        hasHeaderGroups: true,\n      }\n      }\n    />\n  </>\n)\n\nconst ComponentLinks = () => (\n  <Switch>\n    <Route exact path=\"/welcome\" component={Welcome} />\n    <Route exact path=\"/company\" component={Company} />\n    <Route exact path=\"/company/about\" component={About} />\n    <Route exact path=\"/company/team\" component={Team} />\n    <Route exact path=\"/company/contact\" component={Contact} />\n    <Route exact path=\"/company/table-example\" component={TablePage} />\n    <Route exact path=\"/support\" component={Support} />\n    <Route exact path=\"/user/accounts\" component={Accounts} />\n    <Route exact path=\"/user/billing\" component={Billing} />\n    <Route exact path=\"/user/payments\" component={Payments} />\n    <Route path=\"/services/:name\" component={Service} />\n  </Switch>\n);\n\n\nconst unreadNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Event Type',\n    message: 'A short message limited to two lines. Extra text will just truncat...',\n    time: 'Just Now',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '1 min ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '6 mins ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Connection was interrupted',\n    message: 'The connections is not working properly. Please verify your connection or contact your personal support.',\n    time: '1 hour ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 hour ago',\n  },\n]\n\nconst readNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'A new device was added',\n    message: 'The device has bean correctly added',\n    time: '3 days ago',\n  }\n];\n\n\n// unread read can be empty array when there are no notifications\nconst allNotifications: INotificationsHistory = {\n  unread: unreadNotifications,\n  read: readNotifications,\n  noNotificationsText: 'No new notifications',\n  readNotificationsText: 'New',\n  unreadNotificationsText: 'Read',\n}\n\nconst MyCustomDrawer: ReactElement = <h1>Hello Drawer</h1>;\n\nconst customDrawer: ICustomDrawer = {\n  customComponent: MyCustomDrawer,\n  icon: 'Add',\n  status: 'danger',\n  counter: 1001,\n  width: '280px;'\n}\n\nexport const _GlobalUI = () => {\n\n  const {isLightMode ,  onThemeToggle} = useThemeToggle();\n\n\n  const maxWidth = text(\"Max width\", \"1200px\");\n  const paddingOverride = text(\"Padding Override\", \"70px 90px\");\n  const loggedInUser = text(\"Logged In User\", \"full.name@example.com\");\n  const hasSearch = boolean(\"Has Search\", true);\n  const hasLogout = boolean(\"Has Logout\", true);\n  const hasNotifications = boolean(\"Has Notifications\", true);\n  const hasCurrentUser = boolean(\"Has Current User\", true);\n  const currentUserText = text(\"Current User Text\", \"Current User\");\n  const logoutLink = text(\"Logout Url\", \"#\")\n  const logoutText = text(\"Logout Text\", \"Logout\");\n  const accountOptionText = text(\"Account Options Text\", \"Account Options\")\n  const searchPlaceholder = text(\"Search Placeholder\", \"Search area names, etc.\")\n  const logoMark = text(\"Logo Mark SVG\", logoMarkSvg);\n  const logoText = text(\"Logo Text SVG\", logoTextSvg);\n  const supportUrl = text(\"Support Url\", \"/support\");\n  const menuHomeLink = text(\"Home Link\", \"/welcome\");\n  const canAlwaysPin = boolean(\"Can Always Pin\", true);\n  const defaultMenuOpen = boolean(\"Default menu open\", false);\n  const hasLanguage = boolean(\"Has Language\", true);\n  const selectedLanguageText = text(\"Selected Language Text\", \"English\");\n  const hasSwitchTheme = boolean(\"Has Switch Theme\", true);\n  const switchThemeText = text(\"Switch Theme Text\", \"SWITCH THEME\");\n  const selectedThemeText = text(\"Selected Theme Text\", \"Light/Dark Mode\");\n  const languageToggle = action('onLanguageToggle');\n  const hasUserDrawerMeta = boolean(\"Has User Drawer Meta\", false);\n  const copySuccessMessage= text(\"Tooltip Text\", \"Copied!\");\n  const includeCopyTitle = boolean(\"Include Title Copy\", true);\n  const hasUserDrawerFooter = boolean(\"Has User Drawer Footer\", false);\n  const userDrawerFooter = object(\"User Drawer Footer\", {\n    icon: 'Information',\n    title: 'V12.3.4',\n  });\n  const badgeText = text(\"Badge Text\", \"Guest\");\n  const badgeColor = select(\"Badge Color\", ['primary', 'grey', 'info', 'success', 'caution', 'warning'], 'info');\n  const badgeLinkTo = text(\"Badge To\", \"/login\");\n  const badgeLinkText = text(\"Badge Link Text\", \"Login\");\n\n  const menuConfig = object(\"Menu Config\", {\n    items: [\n      {\n        icon: 'Home',\n        title: 'Welcome',\n        href: '/welcome'\n      },\n      {\n        icon: 'Detection',\n        title: 'Company',\n        href: '/company',\n        submenu: [\n          {\n            title: 'About us',\n            href: '/company/about'\n          },\n          {\n            title: 'Team',\n            href: '/company/team'\n          },\n          {\n            title: 'Contact',\n            href: '/company/contact'\n          },\n          {\n            title: 'Table Example',\n            href: '/company/table-example'\n          },\n          {\n            icon: 'Language',\n            title: 'External link',\n            href: 'https://www.google.com/',\n            isExternalLink: true\n          }\n        ]\n      },\n      {\n        icon: 'Usage',\n        title: 'Services',\n        href: '/services',\n        submenu: [\n          {\n            title: 'Online Services'\n          },\n          {\n            title: 'Service custom',\n            href: '/services/custom'\n          },\n          {\n            title: 'Service special',\n            href: '/services/special'\n          },\n          {\n            title: 'Service extra special',\n            href: '/services/extra-special'\n          },\n          {\n            title: 'On site Services'\n          },\n          {\n            title: 'Service special',\n            href: '/services/special'\n          },\n          {\n            title: 'Service extra special',\n            href: '/services/extra-special'\n          }\n        ]\n      },\n      {\n        icon: 'Zone',\n        title: 'External link',\n        href: 'https://www.google.com/maps',\n        isExternalLink: true\n      }\n    ]\n  });\n\n\n  const userSubmenu = object(\"Submenu\", [\n    {\n      text: 'Accounts',\n      href: '/user/accounts'\n    },\n    {\n      text: 'Billing',\n      href: '/user/billing'\n    },\n    {\n      text: 'Payments',\n      href: '/user/payments'\n    }\n  ])\n  const notificationsHistory = object(\"Notifications History\", allNotifications);\n\n  const onLanguageToggle = () => {\n    languageToggle();\n  }\n\n  const getToggleValue = (isMenuOpen: boolean) => {\n    console.log(isMenuOpen);\n  };\n\n  const userDrawerMetaConfig = object(\"User Drawer Meta\", [\n      {\n        icon: '',\n        title: 'Device ID:',\n        subTitle: 'DEB-NUC8i7BE-G6BE935008VH',\n        notes: '',\n        hasCopyIcon:true\n      },\n      {\n        icon: 'Information',\n        title: 'GPU machine with 4 GPU',\n        subTitle: 'Building B',\n        notes: `This is a GPU machine having 30 camera support`,\n        hasCopyIcon:true\n      },\n      {\n        icon: 'Success',\n        title: 'Device is Live',\n        subTitle: 'Building C',\n        notes: `This is a GPU machine having 30 camera support`,\n      },\n    ]\n  );\n\n  return (\n    <Container>\n      <GlobalUI\n        content={menuConfig}\n        home={menuHomeLink}\n        defaultMenuOpen={defaultMenuOpen}\n        onMenuToggle={getToggleValue}\n        canAlwaysPin={canAlwaysPin}\n        userDrawerMeta={userDrawerMetaConfig}\n        legacyLayout={false}\n        badge={{ \n          text: badgeText,\n          color: badgeColor,\n          linkTo: badgeLinkTo,\n          linkText: badgeLinkText\n        }}\n        {...{ logoMark, logoText, supportUrl, maxWidth, paddingOverride, notificationsHistory, customDrawer}}\n        {...{ loggedInUser, userSubmenu, hasSearch, hasLogout, hasNotifications, logoutLink, logoutText, searchPlaceholder, hasLanguage,\n              hasCurrentUser, currentUserText, accountOptionText, userDrawerFooter, hasUserDrawerMeta, copySuccessMessage, includeCopyTitle, hasUserDrawerFooter,\n              selectedLanguageText, hasSwitchTheme, isLightMode, switchThemeText, selectedThemeText, onThemeToggle, onLanguageToggle\n            }}\n      >\n        <ContentLayout layout=\"default\" HeaderContent={ExampleContent}>\n          <ComponentLinks />\n        </ContentLayout>\n      </GlobalUI>\n    </Container>\n  )\n}","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { object, text, boolean, select } from \"@storybook/addon-knobs\";\nimport { TopBar, ICustomDrawer, INotificationItem, INotificationsHistory, useThemeToggle } from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default {\n  title: 'Global',\n  component: TopBar,\n  decorators: []\n};\n\nconst MyCustomDrawer: ReactElement = <h1>Hello Drawer</h1>;\n\nconst drawerProps: ICustomDrawer = {\n  customComponent: MyCustomDrawer,\n  icon: 'Add',\n  status: 'danger',\n  // counter: 5,\n  width: '300px;'\n}\n\nconst unreadNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Event Type',\n    message: 'A short message limited to two lines. Extra text will just truncat...',\n    time: 'Just Now',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '1 min ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '6 mins ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Connection was interrupted',\n    message: 'The connections is not working properly. Please verify your connection or contact your personal support.',\n    time: '1 hour ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 hour ago',\n  },\n]\n\nconst readNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'A new device was added',\n    message: 'The device has bean correctly added',\n    time: '3 days ago',\n  }\n];\n\n\n// unread read can be empty array when there are no notifications\nconst allNotifications: INotificationsHistory = {\n  unread: unreadNotifications,\n  read: readNotifications,\n  noNotificationsText: 'NO NEW NOTIFICATIONS',\n  readNotificationsText: 'NEW',\n  unreadNotificationsText: 'READ',\n}\n\nexport const _TopBar = () => {\n  const {onThemeToggle, isLightMode} = useThemeToggle();\n\n  const loggedInUser = text(\"Logged In User\", \"full.name@example.com\");\n\n  const hasSearch = boolean(\"Has Search\", true);\n  const hasLogout = boolean(\"Has Logout\", true);\n  const hasNotifications = boolean(\"Has Notifications\", true);\n  const hasCurrentUser = boolean(\"Has Current User\", true);\n  const logoutLink = text(\"Logout Url\", \"#\")\n  const searchPlaceholder = text(\"Search Placeholder\", \"Search area names, etc.\")\n  const hasLanguage = boolean(\"Has Language\", true);\n  const selectedLanguageText = text(\"Selected Language Text\", \"English\");\n  const hasSwitchTheme = boolean(\"Has Switch Theme\", true);\n  const switchThemeText = text(\"Switch Theme Text\", \"SWITCH THEME\");\n  const selectedThemeText = text(\"Selected Theme Text\", \"Light/Dark Mode\");\n  const languageToggle = action('onLanguageToggle');\n\n  const currentUserText = text(\"Current User Text\", \"Current User\");\n  const logoutText = text(\"Logout Text\", \"Logout\");\n  const hasUserDrawerMeta = boolean(\"Has User Drawer Meta\", true);\n  const copySuccessMessage= text(\"Tooltip Text\", \"Copied\");\n  const includeCopyTitle = boolean(\"Include Title Copy\", true);\n  const hasUserDrawerFooter = boolean(\"Has User Drawer Footer\", false);\n  const userDrawerFooter = object(\"User Drawer Footer\", {\n    icon: 'Information',\n    title: 'V12.3.4',\n  });\n  const userSubmenu = object(\"Submenu\", [\n    {\n      text: 'Accounts',\n      href: '#'\n    },\n    {\n      text: 'Billing',\n      href: '#'\n    },\n    {\n      text: 'Payments',\n      href: '#'\n    }\n  ])\n  const notificationsHistory = object(\"Notifications History\", allNotifications);\n\n  const userDrawerMetaConfig = object(\"User Drawer Meta\", [\n    {\n      icon: '',\n      title: 'Device ID:',\n      subTitle: 'DEB-NUC8i7BE-G6BE935008VH',\n      notes: '',\n      hasCopyIcon:true\n    },\n    {\n      icon: 'Information',\n      title: 'GPU machine with 4 GPU',\n      subTitle: 'Building B',\n      notes: `This is a GPU machine having 30 camera support`,\n      hasCopyIcon:true\n    },\n    {\n      icon: 'Success',\n      title: 'Device is Live',\n      subTitle: 'Building C',\n      notes: `This is a GPU machine having 30 camera support`,\n    },\n  ]\n);\n\n  const badgeText = text(\"Badge Text\", \"Guest\");\n  const badgeColor = select(\"Badge Color\", ['primary', 'grey', 'info', 'success', 'caution', 'warning'], 'info');\n  const badgeLinkTo = text(\"Badge To\", \"/login\");\n  const badgeLinkText = text(\"Badge Link Text\", \"Login\");\n\n  // userDrawerBespoke: See examples for implementation of this prop.\n\n  const onLanguageToggle = () => {\n    languageToggle();\n  }\n\n  return (\n    <Container>\n      <TopBar \n        badge={{ \n          text: badgeText,\n          color: badgeColor,\n          linkTo: badgeLinkTo,\n          linkText: badgeLinkText\n        }}\n      {...{\n        loggedInUser,\n        userSubmenu,\n        hasSearch,\n        hasLogout,\n        hasNotifications,\n        logoutLink,\n        searchPlaceholder,\n        hasLanguage,\n        hasUserDrawerMeta,\n        hasUserDrawerFooter,\n        hasCurrentUser,\n        notificationsHistory,\n        hasSwitchTheme,\n        isLightMode,\n        selectedLanguageText,\n        switchThemeText,\n        selectedThemeText,\n        onThemeToggle,\n        onLanguageToggle,\n        currentUserText,\n        logoutText,\n        userDrawerFooter,\n        copySuccessMessage,\n        includeCopyTitle,\n      }}\n        userDrawerMeta={userDrawerMetaConfig}\n        customDrawer={drawerProps}\n      />\n    </Container>\n  );\n};\n","import React from 'react';\nimport {\n  UtilityHeader,\n} from 'scorer-ui-kit';\n\nimport styled from 'styled-components';\nimport { object, boolean } from '@storybook/addon-knobs';\n\nexport default {\n  title: 'Global/molecules',\n  component: UtilityHeader,\n  decorators: [\n  ]\n};\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 80px;\n  background-color: var(--grey-2);\n  background-image: linear-gradient(180.00deg, var(--grey-2) 0%, var(--grey-3) 100%);\n`;\n\nexport const _UtilityHeader = () => {\n  const backLink = object(\"Back Link\", { label: \"Back\", link: \"/\" });\n  const showBreadcrumbs = boolean(\"Show Breadcrumbs\", true);\n  const showHomeIcon = boolean(\"Show Home Icon\", true);\n  const breadcrumbs = object(\"breadcrumbs\", [\n    {\n      text: 'Examples', \n      href:'/'\n    },\n    {\n      text:'Two', \n      href:'#2'\n    },\n    {\n      text:'Three', \n      href:'#3'\n    },\n    {\n      text:'Four', \n      href:'#4'\n    },\n    {\n      text:'Five', \n      href:'#5'\n    }\n  ]);\n  const shareLink = object(\"Share Link\", { show: true, label: \"Share\", link: \"https://www.example.com\", copiedLabel: \"Copied\" });\n  \n  return (\n    <Container>\n      <UtilityHeader \n        back={backLink}\n        showBreadcrumbs={showBreadcrumbs}\n        breadcrumbs={breadcrumbs}\n        showHomeIcon={showHomeIcon}\n        share={shareLink}\n      />\n    </Container>\n  )\n}","import React from 'react';\nimport {\n  GlobalUI,\n  PageHeader,\n  TabList,\n  Tab,\n  ContentLayout,\n  FlexContentPlaceholder,\n  IHeaderContent\n} from 'scorer-ui-kit';\n\nimport styled from 'styled-components';\nimport { select } from '@storybook/addon-knobs';\n\nexport default {\n  title: 'Global/organisms',\n  component: GlobalUI,\n  decorators: [\n  ]\n};\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--grey-2);\n  background-image: linear-gradient(180.00deg, var(--grey-2) 0%, var(--grey-3) 100%);\n`;\n\nconst ExampleContent : IHeaderContent = {\n  UtilityHeaderOptions: {\n    back: { label: \"Back\", link: \"/\" },\n    breadcrumbs: [{text:'Examples', href:'/'},{text:'Two', href:'#2'},{text:'Three', href:'#3'},{text:'Four', href:'#4'},{text:'Five', href:'#5'}],\n    showBreadcrumbs: true,\n    share: { show: true, label: \"Share\", link: \"https://www.example.com\", copiedLabel: \"Copied\" }\n  },\n  PageHeaderArea: <PageHeader\n    title='Welcome'\n    introductionText='Thanks for using our UI library.'\n    icon=\"Home\"\n  />,\n  TabsElementArea: \n    <TabList defaultTabId='tab1'>\n      <Tab tabFor='tab1'>Home</Tab>\n      <Tab tabFor='tab2'>Example One</Tab>\n      <Tab tabFor='tab3'>Example Two</Tab>\n    </TabList>\n}\n\nexport const _ContentLayout = () => {\n\n  const layoutType = select('Layout Type', { Default: 'default', Dashboard: 'dashboard', Fullscreen: 'fullscreen' }, 'default');\n\n  return (\n    <Container>\n      \n        {layoutType === 'default' ?\n          <ContentLayout layout=\"default\" HeaderContent={ExampleContent}>\n            <FlexContentPlaceholder title='Content Area' />\n          </ContentLayout>\n        : null }\n\n        {layoutType === 'dashboard' ? \n          <ContentLayout layout=\"dashboard\">\n            <FlexContentPlaceholder title='Content Area' />\n          </ContentLayout>\n        : null }\n\n        {layoutType === 'fullscreen' ? \n          <ContentLayout layout=\"fullscreen\">\n            <FlexContentPlaceholder title='Content Area' />\n          </ContentLayout>\n        : null }\n\n    </Container>\n  )\n}","import React from 'react';\nimport {\n  GlobalUI,\n  SplitLayout,\n  ContentLayout,\n  FlexContentPlaceholder,\n} from 'scorer-ui-kit';\n\nimport styled from 'styled-components';\n\nexport default {\n  title: 'Global/organisms',\n  component: GlobalUI,\n  decorators: [\n  ]\n};\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--grey-2);\n  background-image: linear-gradient(180.00deg, var(--grey-2) 0%, var(--grey-3) 100%);\n`;\n\nexport const _SplitLayoutNested = () => {\n\n  const reverse = false;\n\n  const nestedSplitChild = <SplitLayout\n    layout='vertical'\n    persist\n    persistenceKey='my_nested_key'\n    reverse={reverse}\n    mainArea={{ content: <FlexContentPlaceholder title='Area A' />, minSize: 120 }}\n    sideArea={{ content: <FlexContentPlaceholder title='Area B' />, collapsable: true, minSize: 200 }} />;\n\n  const nestedSplitLayout = <SplitLayout\n    layout='horizontal'\n    persist\n    persistenceKey='my_unique_layout_key'\n    reverse={reverse}\n    mainArea={{ content: nestedSplitChild, minSize: 120 }}\n    sideArea={{ content: <FlexContentPlaceholder title='Area B' />, collapsable: true, minSize: 200 }} />\n\n  return (\n    <Container>\n      <ContentLayout layout='dashboard'>\n        {nestedSplitLayout}\n      </ContentLayout>\n    </Container>\n  )\n};","import React from 'react';\nimport {\n  GlobalUI,\n  SplitLayout,\n  ContentLayout,\n  FlexContentPlaceholder,\n} from 'scorer-ui-kit';\n\nimport styled from 'styled-components';\nimport { boolean } from '@storybook/addon-knobs';\n\nexport default {\n  title: 'Global/organisms',\n  component: GlobalUI,\n  decorators: [\n  ]\n};\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--grey-2);\n  background-image: linear-gradient(180.00deg, var(--grey-2) 0%, var(--grey-3) 100%);\n`;\n\nexport const _SplitLayout = () => {\n  const nested = boolean('Nested', false);\n  const layout = 'horizontal';\n  const reverse = false;\n\n  const splitLayout = <SplitLayout\n    layout={layout}\n    persist\n    persistenceKey='my_unique_layout_key'\n    reverse={reverse}\n    mainArea={{ content: <FlexContentPlaceholder title='Area A' />, minSize: 120 }}\n    sideArea={{ content: <FlexContentPlaceholder title='Area B' />, collapsable: true, minSize: 200 }} />\n\n  const nestedSplitChild = <SplitLayout\n    layout='vertical'\n    persist\n    persistenceKey='my_nested_key'\n    reverse={reverse}\n    mainArea={{ content: <FlexContentPlaceholder title='Area A' />, minSize: 120 }}\n    sideArea={{ content: <FlexContentPlaceholder title='Area B' />, collapsable: true, minSize: 200 }} />;\n\n  const nestedSplitLayout = <SplitLayout\n    layout='horizontal'\n    persist\n    persistenceKey='my_unique_layout_key'\n    reverse={reverse}\n    mainArea={{ content: nestedSplitChild, minSize: 120 }}\n    sideArea={{ content: <FlexContentPlaceholder title='Area B' />, collapsable: true, minSize: 200 }} />\n\n  return (\n    <Container>\n      <ContentLayout layout='dashboard'>\n        {nested ? nestedSplitLayout : splitLayout}\n      </ContentLayout>\n    </Container>\n  )\n};","import React from 'react';\nimport { select, text, number } from \"@storybook/addon-knobs\";\nimport styled from 'styled-components';\nimport {Spinner} from 'scorer-ui-kit';\n\nexport default {\n  title: 'Misc',\n  component: Spinner,\n  decorators: []\n};\n\nconst Container = styled.div<{styling: string}>`\n  border-radius: 3px;\n  height: calc(100vh - 2rem);\n  display: flex;\n  justify-content:center;\n  align-items:center;\n  ${({styling}) => `background-color: var(--${styling}-9)` };\n`;\n\nexport const LoadingSpinner = () => {\n  const spinnerSize = select(\"Size\", { Small: \"small\", Medium: \"medium\", Large: \"large\", XLarge: \"xlarge\" }, \"medium\");\n  const spinnerType = select(\"Style\", { Primary: \"primary\", Secondary: \"grey\", Warning: \"warning\" }, \"primary\");\n  const customSize = number(\"Custom Size\", 0);\n  const customBaseColor = text(\"Custom Base Color\", \"\");\n  const customTopColor = text(\"Custom Top Color\", \"\");\n\n  let baseColor = customBaseColor !== '' ? customBaseColor : undefined;\n  let topColor = customTopColor !== '' ? customTopColor : undefined;\n\n  // Fixes issue if story breaks when typing an open bracket for var()\n  baseColor = customBaseColor.indexOf('(') !== -1 && customBaseColor.indexOf(')') === -1 ? customBaseColor + ')' : customBaseColor;\n  topColor = customTopColor.indexOf('(') !== -1 && customTopColor.indexOf(')') === -1 ? customTopColor + ')' : customTopColor;\n\n  return <Container styling={spinnerType}>\n    <Spinner size={spinnerSize} styling={spinnerType} custom={{ size: customSize, ...{ baseColor, topColor } }} />\n  </Container>;\n};","import React from 'react';\nimport styled from 'styled-components';\n\nexport default {\n  title: 'Misc',\n  decorators: []\n};\n\nconst Container = styled.div`\n  width: 80%;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h2`\n  font-family: var(--font-ui);\n  color: var(--grey-8);\n  text-transform: capitalize;\n  font-size: 20px;\n  font-weight: 400;\n`\n\nconst ColorContainer = styled.div`\n  margin-bottom: 80px;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, calc(100%/12));\n  column-gap: 4px;\n  row-gap: 4px;\n  text-align: center;\n`;\n\nconst Swatch = styled.div<{$color: string}>`\n  height: 96px;\n  border-radius: 4px;\n\n  ${({$color}) => $color && `\n    background: var(${$color});\n  `};\n`\n\nconst SwatchName = styled.div`\n  position: absolute;\n  font-size: 12px;\n  padding: 4px;\n  border-radius: 4px 0 2px 0;\n  background-color: var(--white-a10);\n  color: var(--black-a10);\n`;\n\n\n\nexport const _Colors = () => {\n\n  const palette : string[] = ['primary', 'secondary', 'grey', 'info', 'success', 'caution', 'warning', 'orange', 'red', 'green', 'black', 'white'];\n  const references : string[] = ['1','2','3','4','5','6','7','8','9','10','11','12'];\n \n  const generatePalette = (name: string, alpha?: boolean) => {\n    return references.map((iteration) => {\n      const $color = `--${name}-${alpha ? 'a' : ''}${iteration}`;\n      return(\n        <Swatch {...{$color}}>\n          <SwatchName>{$color}</SwatchName>\n        </Swatch>\n      );\n    })\n  }\n\n  return <Container>\n    {palette.map((value)=> {\n      return <ColorContainer>\n        <Title>{value}</Title>\n        <Grid>\n          { generatePalette(value) }\n          { generatePalette(value, true) }\n        </Grid>\n      </ColorContainer>\n    })}\n  </Container>;\n};","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport {  select } from \"@storybook/addon-knobs\";\n\nexport default {\n  title: 'Misc',\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 80px;\n  background: var(--grey-2);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: var(--columnPadding, 16px);\n  text-rendering: optimizeLegibility; \n`;\n\nconst Item = styled.div<{font: string, weight: number | string, italic?: boolean}>`\n  font-family: ${({font}) => font === 'Lato' ? `var(--font-data)` : `var(--font-ui)`};\n  font-weight: ${({weight}) => weight};\n  font-style: ${({italic}) => italic ? 'italic' : 'normal'};\n  color: var(--grey-12);\n\n  > div {\n    display: none;\n  }\n`\n\nexport const _FontSheet = () => {\n\n  const font = select(\"Font\", ['Lato', 'Monorale', 'Noto Sans (JP)'], 'Lato');\n\n  return <Container>\n    {font === 'Lato' ? \n      <Fragment>\n        <Item font={'Lato'} weight={100}>\n          This is Lato Hairline\n        </Item>\n\n        <Item font={'Lato'} weight={100} italic>\n          This is Lato Hairline Italic\n        </Item>\n\n        <Item font={'Lato'} weight={200}>\n          This is Lato ExtraLight\n        </Item>\n\n        <Item font={'Lato'} weight={200} italic>\n          This is Lato ExtraLight Italic\n        </Item>\n\n        <Item font={'Lato'} weight={300}>\n          This is Lato Light\n        </Item>\n\n        <Item font={'Lato'} weight={300} italic>\n          This is Lato Light Italic\n        </Item>\n\n        <Item font={'Lato'} weight={'normal'}>\n          This is Lato Regular\n        </Item>\n\n        <Item font={'Lato'} weight={'normal'} italic>\n          This is Lato Regular Italic\n        </Item>\n\n        <Item font={'Lato'} weight={500}>\n          This is Lato Medium\n        </Item>\n\n        <Item font={'Lato'} weight={500} italic>\n          This is Lato Medium Italic\n        </Item>\n\n        <Item font={'Lato'} weight={600}>\n          This is Lato SemiBold\n        </Item>\n\n        <Item font={'Lato'} weight={600} italic>\n          This is Lato SemiBold Italic\n        </Item>\n        \n        <Item font={'Lato'} weight={'bold'}>\n          This is Lato Bold\n        </Item>\n\n        <Item font={'Lato'} weight={'bold'} italic>\n          This is Lato Bold Italic\n        </Item>\n        \n        <Item font={'Lato'} weight={800}>\n          This is Lato ExtraBold\n        </Item>\n\n        <Item font={'Lato'} weight={800} italic>\n          This is Lato ExtraBold Italic\n        </Item>\n\n        <Item font={'Lato'} weight={900}>\n          This is Lato Black\n        </Item>\n\n        <Item font={'Lato'} weight={900} italic>\n          This is Lato Black Italic\n        </Item>\n      </Fragment> \n    : null }\n\n    {font === 'Monorale' ? \n      <Fragment>\n        <Item font={'Monorale'} weight={100}>\n          This is Monorale Thin\n        </Item>\n\n        <Item font={'Monorale'} weight={100} italic>\n          This is Monorale Thin Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={200}>\n          This is Monorale Extra Light\n        </Item>\n\n        <Item font={'Monorale'} weight={200} italic>\n          This is Monorale Extra Light Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={300}>\n          This is Monorale Light\n        </Item>\n\n        <Item font={'Monorale'} weight={300} italic>\n          This is Monorale Light Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={400}>\n          This is Monorale \n        </Item>\n\n        <Item font={'Monorale'} weight={400} italic>\n          This is Monorale Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={500}>\n          This is Monorale Medium\n        </Item>\n\n        <Item font={'Monorale'} weight={500} italic>\n          This is Monorale Medium Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={600}>\n          This is Monorale Semibold\n        </Item>\n\n        <Item font={'Monorale'} weight={600} italic>\n          This is Monorale Semibold Italic\n        </Item>\n\n        <Item font={'Monorale'} weight={'bold'}>\n          This is Monorale Bold\n        </Item>\n\n        <Item font={'Monorale'} weight={800}>\n          This is Monorale Extra Bold\n        </Item>\n\n        <Item font={'Monorale'} weight={900}>\n          This is Monorale Black\n        </Item> \n      </Fragment> \n    : null }\n\n    {font === 'Noto Sans (JP)' ? \n      <Fragment>\n        Pending.\n      </Fragment> \n    : null }\n    \n  </Container>;\n};","import React from 'react';\nimport {  select, boolean, number } from \"@storybook/addon-knobs\";\nimport styled from 'styled-components';\nimport {IconSVGs} from '@future-standard/icons';\nimport {Icon} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\n\n\nexport default {\n  title: 'Misc',\n  component: Icon,\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 12px 24px;\n  width: 100px;\n  border-radius: 3px;\n\n  margin: 15% auto;\n  display:flex;\n  justify-content:center;\n  align-items:center;\n\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 50px);\n  column-gap: 24px;\n  row-gap: 24px;\n  text-align: center;\n`;\n\n\n\nexport const _Icons = () => {\n\n  const iconList = generateIconList();\n\n  const showAll = boolean(\"Show All\", false);\n  const forSvgUsage = boolean(\"For SVG Usage\", false);\n  const icon = select(\"Name\", iconList, Object.keys(iconList)[0]);\n  const color = select(\"Color\", { Mono: \"mono\", Dimmed: \"dimmed\", Subtle: \"subtle\", Inverse: \"inverse\", Primary: \"primary\" , Danger: \"danger\"}, \"mono\");\n  const weight = select(\"Weight\", { Light: \"light\", Regular: \"regular\", Heavy: \"heavy\", Strong: 'strong' }, \"regular\");\n  const size = number(\"Size\", 24);\n\n  /**\n   * Generate a grid of all the icons for easy browsing and hovering to find names.\n   */\n  const generateIconGrid = (props: { color: \"mono\" | \"dimmed\" | \"subtle\" | \"inverse\" | \"primary\" | \"danger\" ; weight: \"regular\" | \"light\" | \"heavy\" | \"strong\"; size: number; }) => {\n    return Object.keys(IconSVGs).map((iconName) => (\n      <div title={iconName} key={iconName}>\n        <Icon icon={iconName} {...props} ></Icon>\n      </div>\n    ));\n  };\n\n  return <Container>\n    {showAll ? <>\n      <Grid>{generateIconGrid({...{color, weight, size, forSvgUsage}})}</Grid>\n    </> : <Icon {...{icon, weight, color, size, forSvgUsage}} />}\n\n  </Container>;\n};","import React from 'react';\nimport {  select, number, boolean } from \"@storybook/addon-knobs\";\nimport styled from 'styled-components';\nimport {StatusIcon} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\n\nexport default {\n  title: 'Misc',\n  component: StatusIcon,\n  decorators: []\n};\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nexport const _Status_Icon = () => {\n  const iconList = generateIconList();\n\n  const icon = select(\"Name\", iconList, Object.keys(iconList)[0]);\n  const counter = number('Counter', 5);\n  const status = select(\"Status\", { Caution: 'caution', Danger: 'danger', Good: 'good', Neutral:'neutral', Highlight:'highlight'}, 'danger');\n  const undefineCounter = boolean('Show empty counter', false);\n  const maxCounter = number('MaxCounter', 999);\n\n  return (\n    <Container>\n      <StatusIcon {...{icon, status}} counter={undefineCounter ? undefined : counter} maxCounter={maxCounter}/>\n    </Container>\n  );\n}","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { BasicSearchInput } from 'scorer-ui-kit';\nimport { text, boolean, select, number } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport { emptyCallbackForStory } from '../../helpers';\n\nexport default {\n  title: 'Misc/atoms',\n  component: BasicSearchInput,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 1 }\n  }\n};\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nexport const _BasicSearchInput = () => {\n\n  const inputPlaceholder = text(\"Placeholder\", \"Search by name...\");\n  const textValue = action('Search value');\n  const hasBorder = boolean('Has border', true);\n  const noBackground = boolean('No Background', true);\n  const color = select(\"Color\", { Mono: \"mono\", Dimmed: \"dimmed\", Subtle: \"subtle\"}, \"subtle\");\n  const iconSize = number('Icon size', 12);\n  const disabled = boolean('Disabled', false)\n\n  const handleChange = useCallback((e) => {\n    const { value } = e.target;\n    textValue(value);\n  }, [textValue]);\n\n\n  return (\n    <Container>\n      <BasicSearchInput\n        placeholder={inputPlaceholder}\n        onChange={emptyCallbackForStory(handleChange)}\n        {...{hasBorder, noBackground, color, iconSize, disabled}}\n      />\n    </Container>\n  )\n}","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { DebouncedSearcher } from 'scorer-ui-kit';\nimport { text, boolean, select, number } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport { emptyCallbackForStory } from '../../helpers';\n\nexport default {\n  title: 'Misc/molecules',\n  component: DebouncedSearcher,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 1 }\n  }\n};\n\nconst Container = styled.div`\n  margin: 20px;\n`;\n\nexport const _DebouncedSearcher = () => {\n\n  const inputPlaceholder = text(\"Placeholder\", \"Search by name...\");\n  const textValue = action('Search value');\n  const hasBorder = boolean('Has border', true);\n  const color = select(\"Color\", { Mono: \"mono\", Dimmed: \"dimmed\", Subtle: \"subtle\" }, \"subtle\");\n  const iconSize = number('Icon size', 12);\n  const disabled = boolean('Disabled', false)\n  const defaultValue = text('Default Value', '');\n\n  const handleChange = useCallback((debounceInput: string) => {\n    textValue(debounceInput);\n  }, [textValue]);\n\n  return (\n    <Container>\n      <DebouncedSearcher\n        placeholder={inputPlaceholder}\n        onDebouncedChange={emptyCallbackForStory(handleChange)}\n        {...{ hasBorder, color, iconSize, disabled, defaultValue }}\n      />\n    </Container>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { TabsWithIconBar, ITabIcon, PageHeader } from 'scorer-ui-kit';\nimport { text, object } from \"@storybook/addon-knobs\";\n\nexport default {\n  title: 'Misc/molecules',\n  component: TabsWithIconBar,\n  decorators: []\n};\n\nconst PADDING_LEFT = '87px';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  margin: 30px 0;\n`;\n\nconst LayoutWrapper = styled.div`\n  padding: ${`30px 30px 30px ${PADDING_LEFT}`} ;\n`;\n\nconst list: ITabIcon[] = [\n  {\n    icon: 'Success',\n    title: 'New People',\n    subtitle: 'Selected 120 of 120',\n    tabFor: 'example1',\n    customComponent: <LayoutWrapper><PageHeader title='Success people' introductionText='This is an example of a page shown by a selected tab' /></LayoutWrapper>\n  },\n  {\n    icon: 'RecognitionPhoto',\n    title: 'Updates To People',\n    subtitle: 'Selected 0 of 4',\n    tabFor: 'example2',\n    customComponent: <LayoutWrapper><PageHeader title='Updates to people' introductionText='This is an example of a page shown by a selected tab' /></LayoutWrapper>\n  },\n  {\n    icon: 'BigWarning',\n    title: 'Missing Images',\n    subtitle: '4 entries w/out images',\n    tabFor: 'example3',\n    customComponent: <LayoutWrapper><PageHeader title='Missing images' introductionText='This is an example of a page shown by a selected tab' /></LayoutWrapper>\n  },\n  {\n    icon: 'Warning',\n    title: 'Errors',\n    subtitle: '6 entries with errors',\n    tabFor: 'example4',\n    customComponent: <LayoutWrapper><PageHeader title='Errors' introductionText='This is an example of a page shown by a selected tab' /></LayoutWrapper>\n  }\n]\n\nexport const _TabWithIconBar = () => {\n\n  const defaultTabId = text('Default Tab Id', 'example1');\n  const paddingLeft = text('Padding Left Override', PADDING_LEFT);\n  const tabList = object('TabList', list);\n\n  return (\n    <Container>\n      <TabsWithIconBar {...{ defaultTabId, tabList, paddingLeft }} />\n    </Container>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {TagList, ITag} from 'scorer-ui-kit';\nimport {object} from \"@storybook/addon-knobs\";\n\n\nexport default {\n  title: 'Misc/Molecules',\n  component: TagList,\n  decorators: []\n};\n\n\n// overflow-x: scroll;\nconst Container = styled.div`\n  font-family: ${p => p.theme.fontFamily.data};\n  margin: 100px;\n  display: table-cell;\n  height: 50px;\n  width: 300px;\n  vertical-align: middle;\n  position: relative;\n  line-height: 30px;\n  padding: 0 2px;\n`;\n\nconst defaultTags : ITag[] = [\n  {\n    label: 'Shop A',\n    icon: 'MetaCategories',\n  },\n  {\n    label: 'Example',\n    icon: 'MetaTags',\n    color: 'primary'\n  },\n  {\n    label: 'Smart',\n    icon: 'MetaTags',\n  },\n\n];\n\nexport const _TagList = () => {\n\n  const someTags = object(\"tagsConfig\", defaultTags)\n  return(\n    <Container>\n      <TagList tagsConfig={someTags}/>\n    </Container>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {  text } from \"@storybook/addon-knobs\";\n\nimport {IntroductionText} from 'scorer-ui-kit';\n\nconst Container = styled.div`\n  margin: 100px;\n`;\n\nexport default {\n  title: 'Pages/atoms',\n  component: IntroductionText,\n  decorators: []\n};\n\nexport const _IntroductionText = () => {\n\n  const introductionText = text(\"Text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam sodales non mauris sed fermentum. Proin non elit at lectus semper lacinia a sed nisi. Sed nibh neque, sagittis at laoreet non, sodales non nisl. Nam nec lectus erat. Etiam bibendum tristique ipsum eu dictum. Nam egestas felis in mauris molestie tristique.\");\n\n  return <Container><IntroductionText>{introductionText}</IntroductionText></Container>;\n\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport {  text, select, boolean, object } from \"@storybook/addon-knobs\";\n\nimport {PageHeader, IHeaderTag, ButtonsStack, IButtonStack} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\nconst Container = styled.div`\n  margin: 100px;\n`;\n\nexport default {\n  title: 'Pages/molecules',\n  component: PageHeader,\n  decorators: []\n};\n\nconst defaultTags : IHeaderTag[] = [\n  {\n    label: 'Shop A',\n    icon: 'MetaCategories',\n    linkTo:'/'\n  },\n  {\n    label: 'Example',\n    icon: 'MetaTags',\n  },\n  {\n    label: 'Smart',\n    icon: 'MetaTags',\n  },\n  {\n    label: 'Shop B',\n    icon: 'MetaCategories',\n  },\n  {\n    label: 'Example',\n    icon: 'MetaTags',\n  },\n  {\n    label: 'Smart',\n    icon: 'MetaTags',\n  },\n    {\n    label: 'Shop C',\n    icon: 'MetaCategories',\n  },\n  {\n    label: 'Example',\n    icon: 'MetaTags',\n  },\n  {\n    label: 'Smart',\n    icon: 'MetaTags',\n  },\n];\n\nconst defaultBtn : IButtonStack[] = [\n  {id:'primaryBase0', buttonType: 'default', text:'Example Action 1'},\n  {id:'secondaryBase1', buttonType: 'default', text:'Example Action 2', design: 'secondary'},\n  {id:'buttonWithIcon2', buttonType: 'icon-button', text:'Delete Instance', design: 'danger', icon: 'DevicesScorerEdge'},\n]\n\nexport const _PageHeader = () => {\n\n  const iconList = Object.assign({ None: null }, generateIconList());\n\n  const pageTitle = text(\"Page Title\", \"My Page Title\");\n  const pageAreaText = text(\"Page Area\", \"Area Name\");\n  const pageAreaHref = text(\"Page Area Href\", \"#\");\n  const pageIcon = select(\"Icon\", iconList, 'Link');\n  const pageIconColor = select(\"Icon Color\", { Mono: \"mono\", Dimmed: \"dimmed\", Subtle: \"subtle\", Inverse: \"inverse\", Primary: \"primary\" , Danger: \"danger\", Undefined: undefined}, undefined);\n  const updateDocTitle = boolean(\"Update Doc Title\", true);\n  const noTagsExample = boolean(\"No tags Example\", false);\n  const areaTitleBottom = boolean(\"Area Title Bottom\", false);\n  const noButtonsExample = boolean(\"No Buttons Example\", false)\n  const noIconExample = boolean(\"No Icon\", false);\n  const introductionText = text(\"Text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam sodales non mauris sed fermentum. Proin non elit at lectus semper lacinia a sed nisi. Sed nibh neque, sagittis at laoreet non, sodales non nisl. Nam nec lectus erat. Etiam bibendum tristique ipsum eu dictum. Nam egestas felis in mauris molestie tristique.\");\n  const tagList = object('Tag List', defaultTags)\n  const buttonList = object('Buttons Stack', defaultBtn)\n\n  if(updateDocTitle){\n    console.info(\"Note: Updating document.title in Storybook has no effect though it should work in projects.\")\n  }\n\n  return <Container>\n        <PageHeader\n          icon={noIconExample ? undefined : pageIcon || undefined}\n          iconColor={pageIconColor}\n          introductionText={introductionText}\n          title={pageTitle}\n          areaTitle={pageAreaText}\n          areaHref={pageAreaHref}\n          updateDocTitle={updateDocTitle}\n          tagList={noTagsExample ? undefined : tagList}\n          rightContent={noButtonsExample ? undefined : <ButtonsStack buttons={buttonList}/>}\n          areaTitleBottom={areaTitleBottom}\n        />\n      </Container>;\n\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { text, select, boolean } from \"@storybook/addon-knobs\";\n\nimport {PageTitle} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\nconst Container = styled.div`\n  margin: 100px;\n`;\n\nexport default {\n  title: 'Pages/atoms',\n  component: PageTitle,\n  decorators: []\n};\n\nexport const _PageTitle = () => {\n\n  const iconList = Object.assign({ None: null }, generateIconList());\n\n  const title = text(\"Title\", \"My Page Title\");\n  const icon = select(\"Icon\", iconList, 'Link');\n  const iconColor = select(\"Color\", { Mono: \"mono\", Dimmed: \"dimmed\", Subtle: \"subtle\", Inverse: \"inverse\", Primary: \"primary\" , Danger: \"danger\"}, \"mono\");\n  const areaTitleBottom = boolean(\"Area Title Bottom\", false);\n  const areaTitle = text(\"Area Title\", \"Area Title\");\n  const areaHref = text(\"Area Href\", \"#\");\n\n  return <Container><PageTitle {...{title, areaTitle, areaHref, areaTitleBottom, iconColor}} icon={icon || undefined} /></Container>;\n\n};","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { text, select } from \"@storybook/addon-knobs\";\nimport {EditCell} from 'scorer-ui-kit';\nimport {sleep} from '../../helpers';\n\nexport default {\n  title: 'Tables/atoms',\n  component: EditCell,\n  decorators: []\n};\n\nconst Container = styled.div`\n  font-family: ${p => p.theme.fontFamily.data};\n  ${p => p.theme.typography.table.columnData['normalImportance']};\n  margin: 100px;\n  display: table-cell;\n  height: 50px;\n  width: 150px;\n  vertical-align: middle;\n  position: relative;\n  line-height: 30px;\n  padding: 0 2px;\n`;\n\nconst defaultVal = {id:'id-1', cameraName:'Camera1'}\n\nexport const _EditCell = () => {\n  const [cameraData, setCameraData] = useState(defaultVal);\n  const alignment = select('Alignment', { Left: \"left\", Center: \"center\", Right: \"right\" }, \"left\");\n  const toValue = text('ToLink', '/');\n\n\n  const updateCameraName = async (value: string, rowKey:string) => {\n    // vefiry the row you want to update\n    if(rowKey === 'id-1') {\n      const updatedCell = {...cameraData};\n      updatedCell.cameraName = value;\n    // Database wait example\n      await sleep(2000);\n      setCameraData(updatedCell);\n    }\n  }\n\n\n  return <Container>\n    <EditCell\n      defaultValue={cameraData.cameraName}\n      rowKey={cameraData.id}\n      saveCallback={updateCameraName}\n      alignment={alignment}\n      toLink={toValue}\n      />\n  </Container>\n};","import React, {useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {  boolean, text } from \"@storybook/addon-knobs\";\nimport {TableHeaderTitle} from 'scorer-ui-kit';\n\nexport default {\n  title: 'Tables/atoms',\n  component: TableHeaderTitle,\n  decorators: []\n};\n\nconst Container = styled.div`\n  font-family: ${p => p.theme.fontFamily.data};\n  display: table-cell;\n  height: inherit;\n  vertical-align:top;\n  line-height: 20px;\n  position: relative;\n  margin: 100px;\n`;\n\nexport const _TableHeaderTitle = () => {\n  const [toggleSort, setToggleSort] = useState(true);\n  const isSortActive = boolean('isSortActive', true);\n  const sortable = boolean('sortable', toggleSort);\n  const asc = boolean('ascending', toggleSort)\n  const header = text('header', 'Device Name')\n\n  useEffect(() => {\n    setToggleSort(asc);\n  }, [asc])\n\n  const sortHandler = useCallback((indexKey: number) => {\n    console.log('arriving', toggleSort);\n    setToggleSort((prev) => !prev)\n  },[toggleSort])\n\n  return <Container>\n      <TableHeaderTitle\n          sortable={sortable}\n          isSortActive= {isSortActive}\n          ascending={toggleSort}\n          columnId={'firstColumn'}\n          indexKey={1}\n          header={header}\n          toggleSort={sortHandler}\n        />\n  </Container>\n\n};","import React from 'react';\nimport { boolean, select, text } from \"@storybook/addon-knobs\";\nimport styled from 'styled-components';\n\nimport photo from '../../assets/placeholder.jpg';\nimport { ModalProvider, TableRowThumbnail } from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\n\nconst video = 'https://future-standard.github.io/scorer-ui-kit/traffic.mp4'\n\n\nexport default {\n  title: 'Tables/atoms',\n  component: TableRowThumbnail,\n  decorators: []\n};\n\nconst Container = styled.div`\n  height: 200px;\n  width:  800px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst ContainerInner = styled.div`\n  flex: 0;\n  height: 35px;\n`;\n\nexport const _RowThumbnail = () => {\n\n  const hoverZoom = boolean(\"Zoom On Hover\", true);\n  const image = text(\"Image Src\", photo);\n  const mediaUrl = text(\"Video Src\", video);\n  const mediaType = select(\"Media Type\", ['img', 'video'], 'video');\n  const retryImageLoad = boolean(\"Retry Image\", false);\n  const onClickAction = action('Doing some other action than opening a modal');\n  const onClickThumbnail = boolean('Custom onClickThumnail', false);\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <ContainerInner>\n          <TableRowThumbnail onClickThumbnail={onClickThumbnail ? onClickAction : undefined} {...{ hoverZoom, image, mediaUrl, mediaType, retryImageLoad }} />\n        </ContainerInner>\n      </ModalProvider>\n    </Container>\n  )\n};","import React, {useState, useCallback, ReactElement} from 'react';\nimport styled from 'styled-components';\nimport { object, boolean } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\n\nimport {\n  TypeTable as TypeTableCustom,\n  ActionButtons,\n  IconButtonData,\n  MultilineContent,\n  ModalProvider,\n} from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\nimport {\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nconst TimeText = styled.div`\n  font-size: 12px;\n  span {\n    font-style: italic;\n  }\n`;\n\nexport default {\n  title: 'Tables/molecules',\n  component: TypeTableCustom,\n  decorators: []\n};\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'Analysed Range',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Job Created At',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Run Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Status',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Actions',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment: 'right'\n  },\n\n];\n\nconst onDelete = action('Deleting..');\nconst onDownloadVideo = action('Downloading video..');\nconst onDownloadLogs = action('Downloading logs');\nconst onRetry = action('Retry');\nconst onConfig = action('Going to config page');\n\nconst handleDelete = (deviceId: string) => {\n  console.log(`Running deleting job log for device:  ${deviceId}`);\n  onDelete();\n};\n\nconst handleRetry = (deviceId: string) => {\n  console.log(`Retrying job for device:  ${deviceId}`);\n  onRetry();\n};\n\nconst handleDownloadVideo = (deviceId: string) => {\n  console.log(`Download video of device:  ${deviceId}`);\n  onDownloadVideo();\n};\n\nconst handleDownloadLogs = (deviceId: string) => {\n  console.log(`Dowload job log for device:  ${deviceId}`);\n  onDownloadLogs();\n};\n\nconst handleConfigJob = (deviceId: string) => {\n  console.log(`Config analysis job for device:  ${deviceId}`);\n  onConfig();\n};\n\n\nconst generateConfigButtons  = (rowId: string) : IconButtonData[] => {\n  return (\n    [\n      {\n        icon: 'RetryJob',\n        onClick: () => {handleRetry(rowId)},\n      },\n      {\n        icon: 'Delete',\n        onClick: () => {handleDelete(rowId)},\n      },\n      {\n        icon: 'DownloadVideo',\n        onClick: () => {handleDownloadVideo(rowId)},\n      },\n      {\n        icon: 'Download',\n        onClick: () => {handleDownloadLogs(rowId)},\n      },\n      {\n        icon: 'ViewSettings',\n        onClick: () => {handleConfigJob(rowId)},\n      },\n    ]\n  )\n}\n\nconst generateTimeRows = (initTime: string, endTime: string) : ReactElement[] =>  {\n  return (\n    [\n      <TimeText>{`${initTime} ${String.fromCharCode(160)} →`}</TimeText>,\n      <TimeText>{endTime}<span>{` JST`}</span></TimeText>\n    ]\n  )\n}\n\nconst initialRows : ITypeTableData = [\n  {\n    id: 'row1',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/06/11 - 16:00','2020/06/11 - 21:30')}/>},\n      {customComponent: <div style={{fontStyle:'italic'}}>Just Now</div>},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device1')}/>},\n    ]\n  },\n  {\n    id: 'row2',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/06/11 - 13:00','2020/06/11 - 17:30')}/>},\n      {text: `2020/06/11 - 17:30`},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device2')}/>},\n    ]\n  },\n  {\n    id: 'row3',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/05/10 - 10:00','2020/05/10 - 12:30')}/>},\n      {text: `2020/05/10 - 12:30`},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device2')}/>},\n    ]\n  }\n];\n\nexport const ActionsTable = () => {\n  const hasThumbnail = boolean(\"Has Thumbnail\", true);\n  const selectable = boolean(\"Selectable Rows\", true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n  const [rows, setRows] = useState<ITypeTableData>(initialRows);\n  const toggleAllCallback = useCallback((checked:boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const selectCallback = useCallback((checked:boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <TypeTableCustom\n          {...{\n            columnConfig,\n            rows,\n            selectable,\n            selectCallback,\n            toggleAllCallback,\n            hasThumbnail,\n          }\n          }\n        />\n      </ModalProvider>\n    </Container>\n  )\n};","import React, {useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\nimport { object } from \"@storybook/addon-knobs\";\n\n\nimport {TypeTable as EditableTable,\n  EditCell,\n  ModalProvider,\n} from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\nimport {sleep} from '../../helpers';\n\nimport {\n  IRowData,\n  IDeviceStatus,\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nexport default {\n  title: 'Tables/molecules',\n  component: EditableTable,\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'Job Number',\n    sortable: false,\n    cellStyle: 'firstColumn',\n  },\n  {\n    header: 'Camera Name',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment:'left',\n  },\n  {\n    header: 'When',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment:'center',\n  },\n  {\n    header: 'Status',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n  },\n  {\n    header: 'Temperature',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n  },\n];\n\ninterface IExampleData {\n  id: string,\n  jobName: string,\n  cameraName: string,\n  jobTime: string,\n  status: IDeviceStatus,\n  statusText: string,\n  temperature: string,\n}\nconst sampleData: IExampleData[] = [\n  {\n    id: 'device-1',\n    jobName: 'capture123',\n    cameraName: 'Camera1',\n    jobTime: 'Just Now',\n    status: 'good',\n    statusText: 'OK',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-2',\n    jobName: 'capture234',\n    cameraName: 'Camera2',\n    jobTime: 'Just Now',\n    status: 'good',\n    statusText: 'OK',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-3',\n    jobName: 'capture345',\n    cameraName: 'Camera3',\n    jobTime: '3 mins ago',\n    status: 'danger',\n    statusText: 'Warning',\n    temperature: '38.2ºC',\n  },\n  {\n    id: 'device-4',\n    jobName: 'capture456',\n    cameraName: 'Camera4',\n    jobTime: '12 mins ago',\n    status: 'danger',\n    statusText:'Warning',\n    temperature: '38.2ºC',\n  }\n];\n\nexport const _EditableTable = () => {\n  const [data, setData] = useState<IExampleData[]>(sampleData);\n  const [rows, setRows] = useState<ITypeTableData>([]);\n  const columnConfig = object('ColumConfig', columnConfigSample);\n\n  const updateCameraName = useCallback(async (name: string, rowKey: string) => {\n    const updatedData = [...data];\n    const updatedRow = updatedData.find(({id}) =>  id === rowKey);\n    if(updatedRow && name.length > 0) {\n\n      updatedRow.cameraName = name;\n      // Database wait example\n      await sleep(3000);\n      setData(updatedData);\n    }\n  },[data]);\n\n  const buildDataRows = useCallback((data : IExampleData[]) : ITypeTableData =>  {\n    const newRows : ITypeTableData = data.map(({id, jobName, cameraName, jobTime, status, statusText, temperature}) => {\n      const row : IRowData =  ({\n        id,\n        header: {\n          image: photo,\n          mediaUrl: photo,\n          mediaType: 'img',\n        },\n        columns:\n        [ {text: jobName },\n          {customComponent: <EditCell alignment={'left'} defaultValue={cameraName} rowKey={id} saveCallback={updateCameraName} toLink='/'/>},\n          { text: jobTime},\n          { text: statusText, status },\n          { text: temperature },\n        ]\n      })\n      return row;\n    })\n\n    return newRows;\n  },[updateCameraName])\n\n  /**\n   * If data is updated the table will be rebuild\n   */\n\n  useEffect(() => {\n    const dataRows : ITypeTableData = buildDataRows(data);\n    setRows(dataRows);\n    return () => {\n      setRows([])\n    }\n  }, [data, buildDataRows]);\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <EditableTable {\n          ...{\n            columnConfig: columnConfig,\n            rows,\n            hasThumbnail: true,\n          }\n        } />\n      </ModalProvider>\n    </Container>\n  )\n};","import React, {useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {boolean, text, object} from \"@storybook/addon-knobs\";\n\nimport {TypeTable as LoadingTable } from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\n\nimport {\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nexport default {\n  title: 'Tables/molecules',\n  component: LoadingTable,\n  decorators: []\n};\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'When',\n    groupTitle: 'Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    minWidth: 200,\n  },\n  {\n    header: 'Status',\n    groupTitle: 'Metadata',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    showStatus: true,\n    minWidth: 200,\n  },\n  {\n    header: 'The Highest Temperature Recorded',\n    groupTitle: 'Metadata',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    minWidth: 200,\n  },\n];\n\nconst initialRows : ITypeTableData = [\n  {\n    columns: []\n  }\n];\n\n\nconst dataRows : ITypeTableData = [\n  {\n    id: 'device-1',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: 'JustNow'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-2',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '3 mins ago'},\n      { text: 'Warning', status: 'danger' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-3',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '12 mins ago'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n  {\n    id: 'device-4',\n    header: {\n      image: photo,\n    },\n    columns:\n    [\n      { text: '1 hour ago'},\n      { text: 'OK', status: 'good' },\n      { text: '38.2ºC' },\n    ]\n  },\n];\n\nexport const _LoadingTable = () => {\n  const isLoading = boolean(\"IsLoading\", true);\n  const emptyTable = boolean(\"Show Empty Table\", true);\n  const disableOneCheckbox = boolean('Disable 1st Checkbox', false);\n  const emptyTableTitle = text(\"emptyTableTitle\",\"No Data Available\");\n  const emptyTableText = text(\"emptyTableText\", 'There is currently no data');\n  const loadingText = text(\"loadingText\", 'Loading Data..')\n  const selectable = boolean(\"Selectable Rows\", true);\n  const hasGroups = boolean('Has Header Groups', true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n\n\n  const [rows, setRows] = useState<ITypeTableData>(initialRows);\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    setRows((prevRows) => {\n      const newRows = [...prevRows];\n      newRows.forEach((row) => {\n        row._checked = checked;\n      });\n      return newRows;\n    });\n  }, [setRows]);\n\n    // Sent to checkbox in TableRow via Table component.\n    const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n      setRows((prevRows) => {\n        const newRows = [...prevRows];\n        const targetRowIndex = newRows.findIndex((row) => row.id === id);\n        if (targetRowIndex > -1) {\n          newRows[targetRowIndex]._checked = checked;\n        }\n        return newRows;\n      });\n    }, [setRows]);\n\n  useEffect(() => {\n    if(emptyTable) {\n      setRows(initialRows)\n    } else {\n      setRows(dataRows);\n    }\n    return () => {\n      setRows(initialRows);\n    }\n  }, [emptyTable])\n\n  useEffect(() => {\n    setRows((prevRows) => {\n      const newRows = [...prevRows];\n      newRows[0].checkboxDisabled = disableOneCheckbox;\n      return newRows;\n    });\n  }, [disableOneCheckbox])\n\n  return (\n    <Container>\n      <LoadingTable\n        hasHeaderGroups={hasGroups}\n        {...{\n          columnConfig,\n          rows,\n          toggleAllCallback,\n          selectable,\n          selectCallback,\n          isLoading,\n          loadingText,\n          hasThumbnail: true,\n          emptyTableTitle,\n          emptyTableText,\n        }}\n      />\n    </Container>\n  )\n\n\n};","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { object, boolean, text } from \"@storybook/addon-knobs\";\nimport { TypeTable, ModalProvider } from 'scorer-ui-kit';\n\nimport {\n  ITypeTableData,\n} from 'scorer-ui-kit/dist/Tables';\nimport { tableData, columnConfigSample, ITableSampleData } from '../../helpers/data_samples';\nimport { sortDataBy, rowMaker } from '../../helpers/sample_table_helpers';\nimport { emptyCallbackForStory } from '../../helpers';\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nexport default {\n  title: 'Tables/molecules',\n  component: TypeTable,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 2 }\n  }\n};\n\n/** Imagine this data comes from Server :) */\nconst defaultData: ITableSampleData[] = tableData;\n\nconst sortedByDeviceData = sortDataBy(defaultData, 'deviceName', true);\n\nexport const _TypeTable = () => {\n\n  const [data, setData] = useState<ITableSampleData[]>(sortedByDeviceData);\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(sortedByDeviceData));\n\n  // To implement...\n  const hasStatus = boolean(\"Has Device Status\", true);\n  const hasThumbnail = boolean(\"Has Thumbnail\", true);\n  const closeText = text(\"Close Text\", 'CLOSE');\n  const hasTypeIcon = boolean(\"Has Device Type Icon\", true);\n  const hasHeaderGroups = boolean(\"Has Header Groups\", true);\n  const selectable = boolean(\"Selectable Rows\", true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  useEffect(() => {\n    setRows(rowMaker(data));\n  }, [data])\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <TypeTable {...{\n          columnConfig,\n          selectable,\n          rows,\n          hasStatus,\n          hasThumbnail,\n          closeText,\n          hasTypeIcon,\n          defaultAscending: true,\n          hasHeaderGroups\n          }}\n\n          selectCallback={emptyCallbackForStory(selectCallback)}\n          toggleAllCallback={emptyCallbackForStory(toggleAllCallback)}\n          sortCallback={emptyCallbackForStory(sortCallback)}\n          />\n      </ModalProvider>\n    </Container>\n  );\n};","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport photo from '../../assets/placeholder.jpg';\nimport {\n  TypeTable,\n  IconButtonData,\n  ActionButtons,\n  FilterBar,\n  IFilterDatePicker,\n  IFilterResult,\n  isFilterItem,\n  ActionsBar,\n  useModal,\n  ConfirmationModal\n} from 'scorer-ui-kit';\n\nimport {\n  IRowData,\n  ITypeTableData,\n} from 'scorer-ui-kit/dist/Tables';\n\nimport {\n  tableData,\n  ITableSampleData,\n  columnActionsSample,\n  resultTextTemplateEng,\n  resultTextTemplateJp,\n  clearEng,\n  clearJp,\n  tableDataJp,\n  deleteMessageEn,\n  deleteMessageJp,\n  deleteFilesTitleEn,\n  deleteFilesTitleJP\n} from '../../helpers/data_samples';\n\nimport { filterByCreationDatePicker, sortDataBy } from '../../helpers/sample_table_helpers';\nimport { emptyCallbackForStory } from '../../helpers';\nimport { action } from '@storybook/addon-actions';\n\nconst SelectRows = styled.pre`\n  color: var(--grey-11);\n  margin-top: 75px;\n  background: var(--grey-4);\n  padding: 10px;\n  white-space: normal;\n`;\n\nconst TableBarWrapper = styled.div`\n  margin: 38px 0 26px 0;\n`;\n\nconst rowMaker = (rowData: ITableSampleData[], generateConfigButtons: Function): ITypeTableData => {\n  const newRows: ITypeTableData = rowData.map(({\n    id,\n    created,\n    totalTime,\n    usage,\n    usageUnit,\n    cost\n  }) => {\n\n    const row: IRowData = ({\n      id,\n      header: {\n        image: photo,\n        mediaUrl: photo,\n        mediaType: 'img',\n      },\n      columns: [\n        { text: created.toDateString() },\n        { text: totalTime },\n        { text: `${usage}`, unit: usageUnit },\n        { customComponent: <ActionButtons buttonsConfig={generateConfigButtons(id)} /> },\n      ]\n    })\n    return row;\n  })\n\n  return newRows;\n};\n\nconst getFilteredData = (currentSelected: IFilterResult[], data: ITableSampleData[]): ITableSampleData[] => {\n  if (Array.isArray(currentSelected) && (currentSelected.length > 0)) {\n    const filteredData: ITableSampleData[] = currentSelected.reduce((accumulator, currentFilter) => {\n      if (currentFilter.selected === null) {\n        return accumulator;\n      };\n\n      if (currentFilter.id === 'datePickerForRuntime' && !isFilterItem(currentFilter.selected) && !Array.isArray(currentFilter.selected)) {\n        return filterByCreationDatePicker(accumulator, currentFilter.selected);\n      }\n\n      return accumulator;\n    }, data);\n\n    return filteredData;\n  }\n\n  return data;\n}\n\nconst checkedRowIDs = (rows: ITypeTableData) => {\n  const ids: number | string[] = [];\n\n  rows.forEach((row) => {\n    if (row._checked && row.id) {\n      ids.push(row.id.toString());\n    }\n  });\n\n  return ids;\n\n}\n\ninterface IMultiActionsExample {\n  language: string\n}\n\nconst MultiActionsExample: React.FC<IMultiActionsExample> = ({ language }) => {\n\n  const [data, setData] = useState<ITableSampleData[]>(tableDataJp);\n  const [visibleBar, setVisibleBar] = useState('filterBar');\n  const downloadAction = action('Downloading...');\n  const deleteAction = action('Deleting...');\n\n  const { createModal } = useModal();\n\n  const openConfirmationModal = useCallback((deleteCallback: () => void) => {\n    console.log('creating modal');\n\n    createModal({\n      isCloseEnable: false,\n      customComponent: (\n        <ConfirmationModal\n          title={language === 'english' ? deleteFilesTitleEn : deleteFilesTitleJP}\n          message={language === 'english' ? deleteMessageEn : deleteMessageJp}\n          leftButtonText={language === 'english' ? 'Back' : '戻る'}\n          rightButtonText={language === 'english' ? 'Permanently Delete' : '永久削除'}\n          rightButtonDesign='danger'\n          rightButtonCallback={deleteCallback}\n        />\n      )\n    })\n  }, [createModal, language])\n\n  const handleDelete = useCallback((deviceId: string) => {\n    const notDeletedData: ITableSampleData[] = data.filter(({ id }) => id !== deviceId);\n    setData(notDeletedData);\n    deleteAction(`Deleting ${deviceId}`)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]); // deps for with addon actions was looping\n\n  const handleDownloadLogs = useCallback((deviceId: string) => {\n    downloadAction(`Downloading ${deviceId}`);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // deps with addon actions was looping\n\n  const generateConfigButtons = useCallback((rowId: string): IconButtonData[] => {\n    return (\n      [\n        {\n          icon: 'Delete',\n          onClick: () => { openConfirmationModal(() => handleDelete(rowId)) },\n        },\n        {\n          icon: 'Download',\n          onClick: () => { handleDownloadLogs(rowId) },\n        }\n      ]\n    )\n  }, [handleDelete, handleDownloadLogs, openConfirmationModal])\n\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(tableDataJp, generateConfigButtons));\n\n  const datePickers: IFilterDatePicker[] = [\n    {\n      id: 'datePickerForRuntime',\n      dateMode: 'interval',\n      timeMode: 'off',\n      buttonText: language === 'english' ? 'Date Range' : '日付範囲',\n      buttonIcon: 'DateTime',\n      dateTimeTextUpper: language === 'english' ? 'From' : 'から',\n      dateTimeTextLower: language === 'english' ? 'To' : 'まで',\n      timeZoneTitle: language === 'english' ? 'Timezone' : '時間帯',\n      lang: language === 'english' ? 'en' : 'ja'\n    }\n  ]\n\n  const updateVisibleBar = useCallback((newRows: ITypeTableData) => {\n    const areRowsSelected = newRows.some((row) => row._checked === true);\n    setVisibleBar((prev) => {\n      if ((prev !== 'actionsBar') && areRowsSelected) {\n        return 'actionsBar';\n      }\n\n      if ((prev !== 'filterBar' && !areRowsSelected)) {\n        return 'filterBar';\n      }\n\n      return prev;\n    });\n  }, [])\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n    updateVisibleBar(newRows);\n    setRows(newRows);\n  }, [rows, updateVisibleBar]);\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    updateVisibleBar(newRows);\n    setRows(newRows);\n  }, [rows, updateVisibleBar]);\n\n  const handleActionsFinish = useCallback(() => {\n    setVisibleBar('filterBar');\n    toggleAllCallback(false);\n  }, [toggleAllCallback])\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  const handleFilters = useCallback((currentSelected: IFilterResult[]) => {\n    const localData = language === 'english' ? tableData : tableDataJp\n    const tempData: ITableSampleData[] = [...localData];\n\n    if ((currentSelected.length === 0)) {\n      setData(localData);\n    } else {\n      const filteredData = getFilteredData(currentSelected, tempData);\n      setData(filteredData);\n    }\n\n  }, [language])\n\n  const handleDeleteSelected = useCallback(() => {\n    const rowsSelected = checkedRowIDs(rows);\n    deleteAction(`Deleting ${rowsSelected}`);\n    const notDeletedData: ITableSampleData[] = data.filter(({ id }) => !rowsSelected.includes(id))\n    setData(notDeletedData);\n\n  }, [data, deleteAction, rows]);\n\n  const handleDownloadSelected = useCallback(() => {\n    downloadAction(`Downloading: ${checkedRowIDs(rows).toString()}`)\n  }, [downloadAction, rows])\n\n  useEffect(() => {\n    setRows(rowMaker(data, generateConfigButtons));\n  }, [data, generateConfigButtons])\n\n  return (\n    <>\n      <TableBarWrapper>\n        {visibleBar === 'filterBar'\n          && (\n            <FilterBar\n              searchersConfig={[]}\n              dropdownsConfig={[]}\n              datePickersConfig={datePickers}\n              onChangeCallback={handleFilters}\n              totalResults={rows.length}\n              filtersTitle={language === 'english' ? 'Filters' : 'フィルター'}\n              resultTextTemplate={language === 'english' ? resultTextTemplateEng : resultTextTemplateJp}\n              clearText={language === 'english' ? clearEng : clearJp}\n              resultsDateFormat='yyyy-MM-dd'\n            />)}\n        {visibleBar === 'actionsBar' && (\n          <ActionsBar\n            title={language === 'english' ? 'Actions' : 'アクション'}\n            finishTextButton={language === 'english' ? 'Finish' : '為しおわる'}\n            finishCallback={handleActionsFinish}\n            selectedTemplate={language === 'english' ? 'Selected [SELECTED] of [TOTAL] Results' : '[SELECTED] 〜 [TOTAL]件'}\n            totalAvailable={rows.length}\n            totalSelected={checkedRowIDs(rows).length}\n            actionButtons={[\n              {\n                icon: 'Delete',\n                text: language === 'english' ? 'Delete' : '消す',\n                onClick: () => { openConfirmationModal(handleDeleteSelected) }\n              },\n              {\n                icon: 'Download',\n                text: language === 'english' ? 'Download' : 'ダウンロード',\n                onClick: () => { handleDownloadSelected() }\n              }\n            ]}\n          />\n        )}\n      </TableBarWrapper>\n      <TypeTable {...{\n        columnConfig: columnActionsSample,\n        selectable: true,\n        rows,\n        hasThumbnail: true,\n        defaultAscending: true,\n        hasHeaderGroups: true\n      }}\n\n        selectCallback={emptyCallbackForStory(selectCallback)}\n        toggleAllCallback={emptyCallbackForStory(toggleAllCallback)}\n        sortCallback={emptyCallbackForStory(sortCallback)}\n      />\n      <SelectRows>Selected IDs: [{checkedRowIDs(rows).toString()}]</SelectRows>\n    </>\n  );\n};\n\nexport default MultiActionsExample;","\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport MultiActionsExample from \"./MultiActionsExample\";\nimport { select } from \"@storybook/addon-knobs\";\nimport {\n  ModalProvider,\n  TypeTable,\n} from 'scorer-ui-kit';\n\n\n\nconst Container = styled.div`\n  padding: 100px;\n`;\nexport default {\n  title: 'Tables/molecules',\n  component: TypeTable,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 2 }\n  }\n};\n\n// Story starts here o.o\nexport const _TableMultiActions = () => {\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <MultiActionsExample {...{language}}/>\n      </ModalProvider>\n    </Container>\n  );\n};"],"names":[],"sourceRoot":""}