{"version":3,"file":"Alerts-Notification-stories.b0e70b1b.iframe.bundle.js","mappings":";;;;;AAkBA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Alerts/Notification.stories.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { text, boolean, select } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\nimport {\n  useNotification,\n  Button,\n  INotificationProps,\n  NotificationProvider,\n} from 'scorer-ui-kit';\nimport { generateIconList } from '../helpers';\n\nconst Container = styled.div`\n  margin: 100px 20px 20px 20px;\n  display: grid;\n  grid-template-columns: 200px;\n  row-gap: 15px;\n`;\n\nexport default {\n  title: 'Alerts/atoms',\n  components: useNotification,\n  decorator: []\n}\n\nconst NotificationExample: React.FC<INotificationProps> = (notiSettings) => {\n  const { sendNotification, clearNotifications } = useNotification();\n\n  const [notificationSettings, setNotificationSettings] = useState(notiSettings);\n\n  useEffect(() => {\n    setNotificationSettings(notiSettings);\n  }, [notiSettings])\n\n  return (\n    <>\n      <Button\n        design='secondary'\n        size='small'\n        onClick={() => {\n          sendNotification(notificationSettings)\n        }\n        }\n      >Send notification</Button>\n      <Button onClick={() => clearNotifications()}>\n        Clear Notifications\n      </Button>\n    </>\n  )\n}\n\n  // Provider should be at main Index level, it's here just for the story example\nexport const _Notification = () => {\n\n  const isPin = boolean('Is Pinned', false);\n  const type = select(\"Type\", { Error: 'error', Warning: 'warning', Info: 'info', Success: 'success', Neutral: 'neutral' }, 'info');\n  const msg = text('Message', 'This is a message example');\n  const iconList = {'': '', ...generateIconList()};\n  const icon = select(\"Icon\", iconList, Object.keys(iconList)[0]);\n  const actionText = text('Action Text Button', '');\n  const onTextBtnClick = action('Action was clicked');\n  const closeCall = action('The message was closed by the user');\n\n  const handleActionTextCall = () => {\n    const text = `User clicked on [${actionText}] button`;\n    onTextBtnClick(text);\n  }\n\n  return (\n    <Container>\n      <NotificationProvider>\n        <NotificationExample\n          type={type}\n          message={msg}\n          icon={icon}\n          closeCallback={closeCall}\n          actionTextButton={actionText}\n          onTextButtonClick={handleActionTextCall}\n          isPinned={isPin}\n        />\n      </NotificationProvider>\n    </Container>\n  );\n}"],"names":[],"sourceRoot":""}