{"version":3,"file":"Filters-molecules-FilterDropdownExamples-stories.c886b23b.iframe.bundle.js","mappings":";;;AA+BA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Filters/molecules/FilterDropdownExamples.stories.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { boolean, text, select, number } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\nimport {\n  FilterDropdown,\n  IFilterValue,\n  PageHeader,\n} from 'scorer-ui-kit';\nimport {\n  searchTemplateResultEnglish,\n  searchTemplateResultJapanese,\n  loadingTagsEnglish,\n  genericLoadingJp,\n  emptyResultsEnglish,\n  emptyResultsJapanese,\n} from '../../helpers/data_samples';\nimport { generateIconList } from '../../helpers';\n\nconst FilterDropdownStory = {\n  title: 'Filters/molecules/FilterDropdown',\n  component: FilterDropdown,\n  decorators: []\n};\n\nconst Content = styled.div``;\nconst Divider = styled.div``;\n\nconst Wrapper = styled.div`\n  margin: 100px;\n  display: inline-block;\n`;\n\n\nconst englishDataList = [\n  { text: 'Ramen', value: 0 },\n  { text: 'Takoyaki', value: 1 },\n  { text: 'Gyoza', value: 2 },\n  { text: 'Tempura', value: 3 },\n  { text: 'Sushi', value: 4 },\n  { text: 'Natto', value: 5 },\n  { text: 'Sashimi', value: 6 },\n];\n\nconst japaneseDataList = [\n  { text: 'ラーメン', value: 0 },\n  { text: '蛸焼き', value: 1 },\n  { text: '餃子', value: 2 },\n  { text: '天婦羅', value: 3 },\n  { text: 'すし', value: 4 },\n  { text: '納豆', value: 5 },\n  { text: 'お造り', value: 6 },\n];\n\nconst englishTextList = [\n  { text: 'Super Spicy', value: 0 },\n  { text: 'Spicy', value: 1 },\n  { text: 'Mild', value: 2 },\n  { text: 'Sweet', value: 3 }\n];\nconst japaneseTextList = [{ text: '超辛い', value: 0 }, { text: '辛い', value: 1 }, { text: '中華い', value: 2 }, { text: '甘口', value: 3 }];\n\nconst yearList = [\n  { text: '1900', value: 1900 },\n  { text: '1910', value: 1920 },\n  { text: '1930', value: 1930 },\n  { text: '1950', value: 1950 },\n  { text: '1960', value: 1960 },\n  { text: '1970', value: 1970 },\n  { text: '1980', value: 1980 },\n  { text: '1990', value: 1990 },\n  { text: '2000', value: 2000 },\n  { text: '2010', value: 2010 },\n  { text: '2020', value: 2020 }\n];\n\nconst englishPayList = [{ text: 'Card', value: 0 }, { text: 'Cash', value: 1 }, { text: 'IC Card', value: 2 }];\nconst japanesePayList = [{ text: 'カード', value: 0 }, { text: '現金', value: 1 }, { text: 'IC カード', value: 2 }]\n\n\nconst baseExample = [\n  { text: \"Adipiscing\", value: 0 },\n  { text: \"Amet\", value: 1 },\n  { text: \"Consectetur\", value: 2 },\n  { text: \"Dolor sit\", value: 3 },\n  { text: \"Lorem ipsum\", value: 4 },\n  { text: \"Vestibulum\", value: 5 },\n  { text: \"Minim Veniam\", value: 6 },\n  { text: \"Consequat\", value: 7 },\n  { text: \"Fugiat Nulla\", value: 8 },\n];\n\nexport const MultipleDropdownExamples = () => {\n  const iconList = generateIconList();\n\n  const language = select(\"Language\", { English: 'english', Japanese: \"japanese\" }, \"japanese\");\n  const buttonText = text('Text', 'Department');\n  const buttonIcon = select(\"Button Icon\", iconList, iconList['MetaCategories']);\n  const disabled = boolean('disable', false);\n  const isLoading = boolean('Is Loading', false);\n  const design = select('Design type', {Default: 'default', Basic: 'basic'}, 'default')\n  const optionType = select(\"Option Type\", { text: \"text\", checkbox: \"checkbox\", radio: \"radio\" }, \"checkbox\")\n  const loadingText = text('Loading Text', 'Loading Tags...');\n  const maxDisplayedItems = number('Max Displayed Items', 6);\n  const selectedItems = action('Currently Selected');\n  const foodSelection = action('Food selected');\n  const spiceAction = action('Spicy level');\n  const paymentAction = action('Payment type');\n  const yearAction = action('Years');\n\n  const [selectedObj, setSelectedObj] = useState<IFilterValue>(null); // this could also start with values [{ text: 'Ramen', value: 0 }]\n  const [textArraySelected, setTextArraySelected] = useState<IFilterValue>(null); // this could also start with values ['Spicy','Sweet']\n  const [wordSelected, setWordSelected] = useState<IFilterValue>(language === 'english' ? { text: 'Card', value: 0 } : { text: 'カード', value: 0 }); // this could also start with value 'Card' or null\n  const [numberSelected, setNumberSelected] = useState<IFilterValue>([{ text: '1990', value: 1990 }]); // this could also start with value 1990 or null\n  const [baseSelected, setBaseSelected] = useState<IFilterValue>(null);\n\n  const handleSelectItemType = useCallback((newSelection: IFilterValue) => {\n    foodSelection(newSelection);\n    setSelectedObj(newSelection);\n  }, [foodSelection]);\n\n  const handleTextListSelect = useCallback((newSelection: IFilterValue) => {\n    spiceAction(newSelection);\n    setTextArraySelected(newSelection);\n  }, [spiceAction]);\n\n  const handleNumberListSelect = useCallback((newSelection: IFilterValue) => {\n    yearAction(newSelection);\n    setNumberSelected(newSelection);\n  }, [yearAction]);\n\n  const handleWordSelect = useCallback((newSelection: IFilterValue) => {\n    paymentAction(newSelection);\n    setWordSelected(newSelection);\n  }, [paymentAction]);\n\n  const handleBaseExample = useCallback((newSelection: IFilterValue) => {\n    selectedItems(newSelection);\n    setBaseSelected(newSelection);\n  }, [selectedItems]);\n\n\n  return <Content>\n    <Wrapper key='eje-0'>\n      <PageHeader title='Base Example'\n        introductionText=\"This example doesn't have filter for options.\"\n      />\n      <FilterDropdown\n        {...{\n          disabled,\n          isLoading,\n          buttonText,\n          maxDisplayedItems,\n          buttonIcon,\n          design,\n        }}\n        list={baseExample}\n        onSelect={handleBaseExample}\n        optionType='checkbox'\n        selected={baseSelected}\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n      />\n    </Wrapper>\n    <Wrapper key='eje-1'>\n      <PageHeader title='Data Object'\n        introductionText=\"Array of IFilterList [{text: 'Option1', value: 1 }, {text: 'Option2', value: 2 }]\"\n      />\n      <FilterDropdown {...{\n        buttonIcon,\n        disabled,\n        isLoading,\n        design,\n        loadingText,\n        maxDisplayedItems,\n      }}\n        list={language === 'english' ? englishDataList : japaneseDataList}\n        buttonText={language === 'english' ? 'Menu' : 'メニュー'}\n        selected={selectedObj}\n        optionType={optionType}\n        onSelect={handleSelectItemType}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Menu options...' : 'メニュー...'}\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Divider />\n    <Wrapper key='eje-2'>\n      <PageHeader title='Text type'\n        introductionText=\".\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems\n        }}\n        list={language === 'english' ? englishTextList : japaneseTextList}\n        buttonText={language === 'english' ? 'Spice level' : 'ピリ辛'}\n        selected={textArraySelected}\n        onSelect={handleTextListSelect}\n        optionType='text'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Spice options...' : 'ピリ辛...'}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-3'>\n      <PageHeader title='Radio type'\n        introductionText=\".\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems\n        }}\n        list={language === 'english' ? englishPayList : japanesePayList}\n        buttonText={language === 'english' ? 'Pay Method' : '支払方法'}\n        selected={wordSelected}\n        onSelect={handleWordSelect}\n        optionType='radio'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp }\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        searchPlaceholder={language === 'english' ? 'Pay Methods...' : '支払方法...'}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-4'>\n      <PageHeader title='Checkbox type'\n        introductionText=\"Array of IFilterList with numbers [{text: '1900', value:1910}, {text:'1910', value: 1910}]\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems,\n        }}\n        buttonText={language === 'english' ? 'Year' : '年'}\n        selected={numberSelected}\n        list={yearList}\n        onSelect={handleNumberListSelect}\n        optionType='checkbox'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchPlaceholder={language === 'english' ? 'Years...' : '2020...'}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        hasOptionsFilter\n      />\n    </Wrapper>\n    <Wrapper key='eje-5'>\n      <PageHeader title='Empty Example'\n        introductionText=\"Empty list is been sent.\"\n      />\n      <FilterDropdown\n        {...{\n          buttonIcon,\n          disabled,\n          isLoading,\n          design,\n          loadingText,\n          maxDisplayedItems,\n        }}\n        buttonText={language === 'english' ? 'Tags' : 'タグー'}\n        selected={numberSelected}\n        list={[]}\n        onSelect={handleNumberListSelect}\n        optionType='checkbox'\n        loadingText={language === 'english' ? loadingTagsEnglish : genericLoadingJp}\n        searchPlaceholder={language === 'english' ? 'Filter tags…' : 'フィルタータグ...'}\n        searchResultText={language === 'english' ? searchTemplateResultEnglish : searchTemplateResultJapanese}\n        emptyResultText={language === 'english' ? emptyResultsEnglish : emptyResultsJapanese}\n        hasOptionsFilter\n      />\n    </Wrapper>\n  </Content>\n};\n\nexport default FilterDropdownStory;"],"names":[],"sourceRoot":""}