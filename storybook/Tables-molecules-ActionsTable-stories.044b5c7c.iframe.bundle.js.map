{"version":3,"file":"Tables-molecules-ActionsTable-stories.044b5c7c.iframe.bundle.js","mappings":";;AAqBA;;;;;;;;AAUA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/ActionsTable.stories.tsx"],"sourcesContent":["import React, {useState, useCallback, ReactElement} from 'react';\nimport styled from 'styled-components';\nimport { object, boolean } from \"@storybook/addon-knobs\";\nimport { action } from '@storybook/addon-actions';\n\n\nimport {\n  TypeTable as TypeTableCustom,\n  ActionButtons,\n  IconButtonData,\n  MultilineContent,\n  ModalProvider,\n} from 'scorer-ui-kit';\nimport photo from '../../assets/placeholder.jpg';\nimport {\n  ITableColumnConfig,\n  ITypeTableData\n} from 'scorer-ui-kit/dist/Tables';\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nconst TimeText = styled.div`\n  font-size: 12px;\n  span {\n    font-style: italic;\n    &:lang(ja) {\n      font-style: normal;\n    }\n  }\n`;\n\nexport default {\n  title: 'Tables/molecules',\n  component: TypeTableCustom,\n  decorators: []\n};\n\nconst columnConfigSample : ITableColumnConfig[] = [\n  {\n    header: 'Analysed Range',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Job Created At',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Run Time',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Status',\n    sortable: false,\n    cellStyle: 'normalImportance',\n  },\n  {\n    header: 'Actions',\n    sortable: false,\n    cellStyle: 'normalImportance',\n    alignment: 'right'\n  },\n\n];\n\nconst onDelete = action('Deleting..');\nconst onDownloadVideo = action('Downloading video..');\nconst onDownloadLogs = action('Downloading logs');\nconst onRetry = action('Retry');\nconst onConfig = action('Going to config page');\n\nconst handleDelete = (deviceId: string) => {\n  console.log(`Running deleting job log for device:  ${deviceId}`);\n  onDelete();\n};\n\nconst handleRetry = (deviceId: string) => {\n  console.log(`Retrying job for device:  ${deviceId}`);\n  onRetry();\n};\n\nconst handleDownloadVideo = (deviceId: string) => {\n  console.log(`Download video of device:  ${deviceId}`);\n  onDownloadVideo();\n};\n\nconst handleDownloadLogs = (deviceId: string) => {\n  console.log(`Dowload job log for device:  ${deviceId}`);\n  onDownloadLogs();\n};\n\nconst handleConfigJob = (deviceId: string) => {\n  console.log(`Config analysis job for device:  ${deviceId}`);\n  onConfig();\n};\n\n\nconst generateConfigButtons  = (rowId: string) : IconButtonData[] => {\n  return (\n    [\n      {\n        icon: 'RetryJob',\n        onClick: () => {handleRetry(rowId)},\n      },\n      {\n        icon: 'Delete',\n        onClick: () => {handleDelete(rowId)},\n      },\n      {\n        icon: 'DownloadVideo',\n        onClick: () => {handleDownloadVideo(rowId)},\n      },\n      {\n        icon: 'Download',\n        onClick: () => {handleDownloadLogs(rowId)},\n      },\n      {\n        icon: 'ViewSettings',\n        onClick: () => {handleConfigJob(rowId)},\n      },\n    ]\n  )\n}\n\nconst generateTimeRows = (initTime: string, endTime: string) : ReactElement[] =>  {\n  return (\n    [\n      <TimeText>{`${initTime} ${String.fromCharCode(160)} â†’`}</TimeText>,\n      <TimeText>{endTime}<span>{` JST`}</span></TimeText>\n    ]\n  )\n}\n\nconst initialRows : ITypeTableData = [\n  {\n    id: 'row1',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/06/11 - 16:00','2020/06/11 - 21:30')}/>},\n      {customComponent: <div style={{fontStyle:'italic'}}>Just Now</div>},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device1')}/>},\n    ]\n  },\n  {\n    id: 'row2',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/06/11 - 13:00','2020/06/11 - 17:30')}/>},\n      {text: `2020/06/11 - 17:30`},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device2')}/>},\n    ]\n  },\n  {\n    id: 'row3',\n    header: {\n      image: photo,\n      mediaUrl: photo,\n      mediaType: 'img',\n    },\n    columns: [\n      {customComponent: <MultilineContent contentArray={generateTimeRows('2020/05/10 - 10:00','2020/05/10 - 12:30')}/>},\n      {text: `2020/05/10 - 12:30`},\n      {text: `00:00:12`},\n      {text: `Complete`},\n      { customComponent: <ActionButtons buttonsConfig = {generateConfigButtons('device2')}/>},\n    ]\n  }\n];\n\nexport const ActionsTable = () => {\n  const hasThumbnail = boolean(\"Has Thumbnail\", true);\n  const selectable = boolean(\"Selectable Rows\", true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n  const [rows, setRows] = useState<ITypeTableData>(initialRows);\n  const toggleAllCallback = useCallback((checked:boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const selectCallback = useCallback((checked:boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <TypeTableCustom\n          {...{\n            columnConfig,\n            rows,\n            selectable,\n            selectCallback,\n            toggleAllCallback,\n            hasThumbnail,\n          }\n          }\n        />\n      </ModalProvider>\n    </Container>\n  )\n};"],"names":[],"sourceRoot":""}