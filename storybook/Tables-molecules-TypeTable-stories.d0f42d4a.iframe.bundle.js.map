{"version":3,"file":"Tables-molecules-TypeTable-stories.d0f42d4a.iframe.bundle.js","mappings":";;AAcA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Tables/molecules/TypeTable.stories.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { object, boolean, text } from \"@storybook/addon-knobs\";\nimport { TypeTable, ModalProvider } from 'scorer-ui-kit';\n\nimport {\n  ITypeTableData,\n} from 'scorer-ui-kit/dist/Tables';\nimport { tableData, columnConfigSample, ITableSampleData } from '../../helpers/data_samples';\nimport { sortDataBy, rowMaker } from '../../helpers/sample_table_helpers';\nimport { emptyCallbackForStory } from '../../helpers';\n\nconst Container = styled.div`\n  padding: 100px;\n`;\n\nexport default {\n  title: 'Tables/molecules',\n  component: TypeTable,\n  decorators: [],\n  parameters: {\n    jsx: { skip: 2 }\n  }\n};\n\n/** Imagine this data comes from Server :) */\nconst defaultData: ITableSampleData[] = tableData;\n\nconst sortedByDeviceData = sortDataBy(defaultData, 'deviceName', true);\n\nexport const _TypeTable = () => {\n\n  const [data, setData] = useState<ITableSampleData[]>(sortedByDeviceData);\n  const [rows, setRows] = useState<ITypeTableData>(rowMaker(sortedByDeviceData));\n\n  // To implement...\n  const hasStatus = boolean(\"Has Device Status\", true);\n  const hasThumbnail = boolean(\"Has Thumbnail\", true);\n  const closeText = text(\"Close Text\", 'CLOSE');\n  const hasTypeIcon = boolean(\"Has Device Type Icon\", true);\n  const hasHeaderGroups = boolean(\"Has Header Groups\", true);\n  const selectable = boolean(\"Selectable Rows\", true);\n  const columnConfig = object(\"Column Configuration\", columnConfigSample);\n\n\n  // Sent to checkbox in TableRow via Table component.\n  const selectCallback = useCallback((checked: boolean, id?: string | number) => {\n    const newRows = [...rows];\n    const targetRowIndex = newRows.findIndex(row => row.id === id)\n    newRows[targetRowIndex]._checked = checked;\n\n    setRows(newRows);\n\n  }, [rows, setRows]);\n\n\n  const toggleAllCallback = useCallback((checked: boolean) => {\n    const newRows = [...rows];\n\n    newRows.forEach((row) => {\n      row._checked = checked;\n    });\n\n    setRows(newRows);\n  }, [rows, setRows]);\n\n  const sortCallback = useCallback((ascending: boolean, columnId: string) => {\n    const unsortedData: ITableSampleData[] = [...data];\n\n    const validKey = columnId as keyof ITableSampleData;\n    const sortedData = sortDataBy(unsortedData, validKey, ascending);\n    setData(sortedData);\n\n  }, [data]);\n\n  useEffect(() => {\n    setRows(rowMaker(data));\n  }, [data])\n\n  // Provider should be at main Index level, it's here just for the example\n  return (\n    <Container>\n      <ModalProvider>\n        <TypeTable {...{\n          columnConfig,\n          selectable,\n          rows,\n          hasStatus,\n          hasThumbnail,\n          closeText,\n          hasTypeIcon,\n          defaultAscending: true,\n          hasHeaderGroups\n          }}\n\n          selectCallback={emptyCallbackForStory(selectCallback)}\n          toggleAllCallback={emptyCallbackForStory(toggleAllCallback)}\n          sortCallback={emptyCallbackForStory(sortCallback)}\n          />\n      </ModalProvider>\n    </Container>\n  );\n};"],"names":[],"sourceRoot":""}