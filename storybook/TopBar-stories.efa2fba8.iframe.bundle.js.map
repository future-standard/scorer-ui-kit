{"version":3,"file":"TopBar-stories.efa2fba8.iframe.bundle.js","mappings":";;;;;AAWA","sources":["webpack://scorer-ui-kit-storybook/./src/stories/Global/TopBar.stories.tsx"],"sourcesContent":["import React, { ReactElement, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { object, text, boolean, select } from \"@storybook/addon-knobs\";\nimport { TopBar, ICustomDrawer, INotificationItem, INotificationsHistory, useThemeToggle } from 'scorer-ui-kit';\nimport { action } from '@storybook/addon-actions';\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst TopBarStory = {\n  title: 'Global',\n  component: TopBar,\n  decorators: []\n};\n\nconst MyCustomDrawer: ReactElement = <h1>Hello Drawer</h1>;\n\nconst drawerProps: ICustomDrawer = {\n  customComponent: MyCustomDrawer,\n  icon: 'Add',\n  status: 'danger',\n  // counter: 5,\n  width: '300px;'\n}\n\nconst unreadNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Event Type',\n    message: 'A short message limited to two lines. Extra text will just truncat...',\n    time: 'Just Now',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '1 min ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '6 mins ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Connection was interrupted',\n    message: 'The connections is not working properly. Please verify your connection or contact your personal support.',\n    time: '1 hour ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 hour ago',\n  },\n]\n\nconst readNotifications: INotificationItem[] = [\n  {\n    imgUrl: '',\n    title: 'Device is off',\n    message: 'The device has correctly turn off',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'Device is on',\n    message: 'The device has correctly turn on',\n    time: '3 days ago',\n  },\n  {\n    imgUrl: '',\n    title: 'A new device was added',\n    message: 'The device has bean correctly added',\n    time: '3 days ago',\n  }\n];\n\n\n// unread read can be empty array when there are no notifications\nconst allNotifications: INotificationsHistory = {\n  unread: unreadNotifications,\n  read: readNotifications,\n  noNotificationsText: 'NO NEW NOTIFICATIONS',\n  readNotificationsText: 'NEW',\n  unreadNotificationsText: 'READ',\n}\n\nexport const _TopBar = () => {\n  const {onThemeToggle, isLightMode} = useThemeToggle();\n  const  [attributeLanguage, setAttributeLanguage] = useState('ja');\n\n  const loggedInUser = text(\"Logged In User\", \"full.name@example.com\");\n\n  const hasSearch = boolean(\"Has Search\", true);\n  const hasLogout = boolean(\"Has Logout\", true);\n  const hasNotifications = boolean(\"Has Notifications\", true);\n  const hasCurrentUser = boolean(\"Has Current User\", true);\n  const logoutLink = text(\"Logout Url\", \"#\")\n  const searchPlaceholder = text(\"Search Placeholder\", \"Search area names, etc.\")\n  const hasLanguage = boolean(\"Has Language\", true);\n  const hasSwitchTheme = boolean(\"Has Switch Theme\", true);\n  const switchThemeText = text(\"Switch Theme Text\", \"SWITCH THEME\");\n  const selectedThemeText = text(\"Selected Theme Text\", \"Light/Dark Mode\");\n  const languageToggle = action('onLanguageToggle');\n\n  const currentUserText = text(\"Current User Text\", \"Current User\");\n  const logoutText = text(\"Logout Text\", \"Logout\");\n  const hasUserDrawerMeta = boolean(\"Has User Drawer Meta\", true);\n  const copySuccessMessage= text(\"Tooltip Text\", \"Copied\");\n  const includeCopyTitle = boolean(\"Include Title Copy\", true);\n  const hasUserDrawerFooter = boolean(\"Has User Drawer Footer\", false);\n  const userDrawerFooter = object(\"User Drawer Footer\", {\n    icon: 'Information',\n    title: 'V12.3.4',\n  });\n  const userSubmenu = object(\"Submenu\", [\n    {\n      text: 'Accounts',\n      href: '#'\n    },\n    {\n      text: 'Billing',\n      href: '#'\n    },\n    {\n      text: 'Payments',\n      href: '#'\n    }\n  ])\n  const notificationsHistory = object(\"Notifications History\", allNotifications);\n\n  const userDrawerMetaConfig = object(\"User Drawer Meta\", [\n    {\n      icon: '',\n      title: 'Device ID:',\n      subTitle: 'DEB-NUC8i7BE-G6BE935008VH',\n      notes: '',\n      hasCopyIcon:true\n    },\n    {\n      icon: 'Information',\n      title: 'GPU machine with 4 GPU',\n      subTitle: 'Building B',\n      notes: `This is a GPU machine having 30 camera support`,\n      hasCopyIcon:true\n    },\n    {\n      icon: 'Success',\n      title: 'Device is Live',\n      subTitle: 'Building C',\n      notes: `This is a GPU machine having 30 camera support`,\n    },\n  ]\n);\n\n  const badgeText = text(\"Badge Text\", \"Guest\");\n  const badgeColor = select(\"Badge Color\", ['primary', 'grey', 'info', 'success', 'caution', 'warning'], 'info');\n  const badgeLinkTo = text(\"Badge To\", \"/login\");\n  const badgeLinkText = text(\"Badge Link Text\", \"Login\");\n\n  // userDrawerBespoke: See examples for implementation of this prop.\n\n  const onLanguageToggle = useCallback(() => {\n    setAttributeLanguage((prev:  string) => {\n      const newLang = prev === 'en'? 'ja' : 'en'\n      languageToggle(newLang);\n      return newLang;\n    })\n  },[languageToggle])\n\n  return (\n    <Container>\n      <TopBar\n        badge={{\n          text: badgeText,\n          color: badgeColor,\n          linkTo: badgeLinkTo,\n          linkText: badgeLinkText\n        }}\n      {...{\n        loggedInUser,\n        userSubmenu,\n        hasSearch,\n        hasLogout,\n        hasNotifications,\n        logoutLink,\n        searchPlaceholder,\n        hasLanguage,\n        hasUserDrawerMeta,\n        hasUserDrawerFooter,\n        hasCurrentUser,\n        notificationsHistory,\n        hasSwitchTheme,\n        isLightMode,\n        switchThemeText,\n        selectedThemeText,\n        onThemeToggle,\n        onLanguageToggle,\n        currentUserText,\n        logoutText,\n        userDrawerFooter,\n        copySuccessMessage,\n        includeCopyTitle,\n      }}\n        userDrawerMeta={userDrawerMetaConfig}\n        customDrawer={drawerProps}\n        selectedLangAttribute={attributeLanguage}\n        selectedLanguageText={attributeLanguage === 'ja'? '日本語' : 'ENGLISH' }\n      />\n    </Container>\n  );\n};\n\nexport default TopBarStory;\n"],"names":[],"sourceRoot":""}